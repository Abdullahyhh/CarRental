import * as i0 from '@angular/core';
import { InjectionToken, provideAppInitializer, inject, NgModule, Injector, ViewEncapsulation, Component } from '@angular/core';
import * as i2 from '@volo/ngx-lepton-x.core';
import { LPX_INITIAL_STYLES, LPX_LAYOUT_STYLE_FINAL, createStyleFactory, LPX_STYLE_FINAL, LpxCoreModule, UserProfileService, LpxAvatarModule, LpxTranslateModule, LanguageService, LpxIconModule } from '@volo/ngx-lepton-x.core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2$1 from '@ng-bootstrap/ng-bootstrap';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i4 from '@angular/router';
import { RouterModule } from '@angular/router';

const LPX_LITE_STYLE_TOKEN = new InjectionToken('LPX_LITE_STYLE_TOKEN');

const getLpxLiteStyleProviders = (styleFactory) => [
    provideAppInitializer(() => {
        inject(LPX_LITE_STYLE_TOKEN);
    }),
    {
        provide: LPX_LITE_STYLE_TOKEN,
        deps: [LPX_INITIAL_STYLES, LPX_LAYOUT_STYLE_FINAL],
        useFactory: mergeStyles,
    },
    {
        provide: LPX_STYLE_FINAL,
        deps: [LPX_LITE_STYLE_TOKEN],
        useFactory: createStyleFactory(styleFactory),
    },
];
function mergeStyles(styleList, layoutStyles) {
    styleList.push({
        bundleName: 'bootstrap-dim',
    });
    styleList.push({
        bundleName: 'ng-bundle',
    });
    styleList.push({
        bundleName: 'font-bundle',
    });
    return [...styleList, ...layoutStyles];
}

class LpxModule {
    static forRoot(options) {
        return {
            ngModule: LpxModule,
            providers: [
                getLpxLiteStyleProviders(options?.styleFactory),
                LpxCoreModule.forRoot(options).providers,
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: LpxModule, imports: [LpxCoreModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxModule, imports: [LpxCoreModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LpxCoreModule],
                }]
        }] });

class UserProfileComponent {
    constructor() {
        this.service = inject(UserProfileService);
        this.injector = inject(Injector);
        this.user$ = this.service.user$;
    }
    onActionClick(item) {
        item.action?.();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: UserProfileComponent, isStandalone: false, selector: "lpx-user-profile", ngImport: i0, template: "@if (user$ | async; as userProfile) {\r\n  @if (userProfile.userName) {\r\n    <div ngbDropdown>\r\n      <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n        <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n        <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n      </div>\r\n      @if (userProfile.userActionGroups) {\r\n        <div ngbDropdownMenu>\r\n          @for (\r\n            actionGroup of userProfile.userActionGroups;\r\n            track $index;\r\n            let last = $last\r\n          ) {\r\n            @for (action of actionGroup; track $index) {\r\n              @if (action.component) {\r\n                <ng-container\r\n                  *ngComponentOutlet=\"action.component; injector: injector\"\r\n                ></ng-container>\r\n              }\r\n              @if (!action.component) {\r\n                <a\r\n                  ngbDropdownItem\r\n                  (click)=\"onActionClick(action)\"\r\n                  [routerLink]=\"action.link\"\r\n                  >{{ action.text || '' | lpxTranslate | async }}\r\n                </a>\r\n              }\r\n            }\r\n            @if (!last) {\r\n              <div class=\"dropdown-divider\"></div>\r\n            }\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  }\r\n}\r\n", dependencies: [{ kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"], exportAs: ["ngComponentOutlet"] }, { kind: "component", type: i2.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i2$1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "popperOptions", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i2$1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i2$1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i2$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["tabindex", "disabled"] }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'lpx-user-profile', encapsulation: ViewEncapsulation.None, template: "@if (user$ | async; as userProfile) {\r\n  @if (userProfile.userName) {\r\n    <div ngbDropdown>\r\n      <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n        <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n        <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n      </div>\r\n      @if (userProfile.userActionGroups) {\r\n        <div ngbDropdownMenu>\r\n          @for (\r\n            actionGroup of userProfile.userActionGroups;\r\n            track $index;\r\n            let last = $last\r\n          ) {\r\n            @for (action of actionGroup; track $index) {\r\n              @if (action.component) {\r\n                <ng-container\r\n                  *ngComponentOutlet=\"action.component; injector: injector\"\r\n                ></ng-container>\r\n              }\r\n              @if (!action.component) {\r\n                <a\r\n                  ngbDropdownItem\r\n                  (click)=\"onActionClick(action)\"\r\n                  [routerLink]=\"action.link\"\r\n                  >{{ action.text || '' | lpxTranslate | async }}\r\n                </a>\r\n              }\r\n            }\r\n            @if (!last) {\r\n              <div class=\"dropdown-divider\"></div>\r\n            }\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  }\r\n}\r\n" }]
        }] });

class UserProfileModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: UserProfileModule, declarations: [UserProfileComponent], imports: [CommonModule,
            LpxAvatarModule,
            NgbDropdownModule,
            RouterModule,
            LpxTranslateModule], exports: [UserProfileComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileModule, imports: [CommonModule,
            LpxAvatarModule,
            NgbDropdownModule,
            RouterModule,
            LpxTranslateModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [UserProfileComponent],
                    imports: [
                        CommonModule,
                        LpxAvatarModule,
                        NgbDropdownModule,
                        RouterModule,
                        LpxTranslateModule,
                    ],
                    exports: [UserProfileComponent],
                }]
        }] });

class LanguageSelectionComponent {
    constructor() {
        this.service = inject(LanguageService);
        this.langs$ = this.service.languages$;
        this.selectedLanguage$ = this.service.selectedLanguage$;
    }
    onLanguageSelection(lang) {
        this.service.setSelectedLanguage(lang);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: LanguageSelectionComponent, isStandalone: true, selector: "lpx-language-selection", ngImport: i0, template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  @if (selectedLanguage$ | async; as selectedLanguage) {\r\n    <div ngbDropdownToggle role=\"button\">\r\n      <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n      @if (selectedLanguage; as val) {\r\n        <span [ngClass]=\"{ 'text-uppercase': !!val.twoLetterISOLanguageName }\">\r\n          {{ val.twoLetterISOLanguageName || val.displayName }}\r\n        </span>\r\n      }\r\n    </div>\r\n  }\r\n  @if (langs$ | async; as langs) {\r\n    <div ngbDropdownMenu>\r\n      @for (lang of langs; track $index) {\r\n        <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\">\r\n          {{ lang.displayName }}\r\n        </button>\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: NgbDropdownModule }, { kind: "directive", type: i2$1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "popperOptions", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i2$1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i2$1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i2$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["tabindex", "disabled"] }, { kind: "directive", type: i2$1.NgbDropdownButtonItem, selector: "button[ngbDropdownItem]" }, { kind: "ngmodule", type: LpxIconModule }, { kind: "component", type: i2.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-language-selection', imports: [CommonModule, NgbDropdownModule, LpxIconModule], encapsulation: ViewEncapsulation.None, template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  @if (selectedLanguage$ | async; as selectedLanguage) {\r\n    <div ngbDropdownToggle role=\"button\">\r\n      <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n      @if (selectedLanguage; as val) {\r\n        <span [ngClass]=\"{ 'text-uppercase': !!val.twoLetterISOLanguageName }\">\r\n          {{ val.twoLetterISOLanguageName || val.displayName }}\r\n        </span>\r\n      }\r\n    </div>\r\n  }\r\n  @if (langs$ | async; as langs) {\r\n    <div ngbDropdownMenu>\r\n      @for (lang of langs; track $index) {\r\n        <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\">\r\n          {{ lang.displayName }}\r\n        </button>\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n" }]
        }] });

class LanguageSelectionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionModule, imports: [LanguageSelectionComponent], exports: [LanguageSelectionComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionModule, imports: [LanguageSelectionComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [LanguageSelectionComponent],
                    exports: [LanguageSelectionComponent],
                }]
        }] });

/*
 * Public API Surface of lepton-x-lite
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LanguageSelectionComponent, LanguageSelectionModule, LpxModule, UserProfileComponent, UserProfileModule };
//# sourceMappingURL=volo-ngx-lepton-x.lite.mjs.map
