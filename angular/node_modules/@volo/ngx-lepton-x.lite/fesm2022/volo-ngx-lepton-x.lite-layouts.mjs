import * as i0 from '@angular/core';
import { ContentChild, Component, NgModule, Directive, inject, ViewEncapsulation, Input, ChangeDetectionStrategy, InjectionToken, provideAppInitializer } from '@angular/core';
import * as i1$1 from '@angular/common';
import { CommonModule, AsyncPipe } from '@angular/common';
import * as i1 from '@volo/ngx-lepton-x.core';
import { LogoPanelDirective, LpxBrandLogoModule, LpxIconModule, LpxNavbarModule, UserProfileService, LanguageService, LpxVisibleDirective, ToolbarService, LayoutService, NavbarPanelDirective, MobileNavbarPanelDirective, BreadcrumbPanelDirective, FooterPanelDirective, NavitemPanelDirective, ContentPanelDirective, createStyleFactory, LPX_LAYOUT_STYLE_FINAL, LpxAvatarModule, LpxTranslateModule, LpxBreadcrumbModule, LpxResponsiveModule, LpxFooterModule, PanelsModule } from '@volo/ngx-lepton-x.core';
import * as i3 from '@volo/ngx-lepton-x.lite';
import { LanguageSelectionModule, UserProfileModule } from '@volo/ngx-lepton-x.lite';
import * as i2 from '@angular/router';
import { RouterModule } from '@angular/router';
import { Observable, of } from 'rxjs';

class MobileNavbarComponent {
    constructor(navService, layoutService) {
        this.navService = navService;
        this.layoutService = layoutService;
        this.userMenuHidden = true;
        this.navItemsHidden = true;
        this.mobileMenuOpened = 'mobile-menu-opened';
    }
    ngOnDestroy() {
        this.layoutService.removeClass(this.mobileMenuOpened);
    }
    toggleUserMenu() {
        this.userMenuHidden = !this.userMenuHidden;
    }
    toggleNavbar() {
        this.navItemsHidden = !this.navItemsHidden;
        this.setLayoutClass();
    }
    setLayoutClass() {
        if (this.navItemsHidden) {
            this.layoutService.removeClass(this.mobileMenuOpened);
        }
        else {
            this.layoutService.addClass(this.mobileMenuOpened);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileNavbarComponent, deps: [{ token: i1.NavbarService }, { token: i1.LayoutService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: MobileNavbarComponent, isStandalone: false, selector: "lpx-mobile-navbar", queries: [{ propertyName: "logoPanel", first: true, predicate: LogoPanelDirective, descendants: true }], ngImport: i0, template: "<div class=\"lpx-mobile-navbar-container\">\r\n  <header class=\"lpx-mobile-navbar\">\r\n    <div class=\"lpx-logo-container\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"logoPanel?.template || defaultLogo\"\r\n      ></ng-container>\r\n    </div>\r\n    <div class=\"user-menu\">\r\n      <lpx-icon\r\n        iconClass=\"bi bi-person\"\r\n        role=\"button\"\r\n        (click)=\"toggleUserMenu()\"\r\n      ></lpx-icon>\r\n      <lpx-icon\r\n        iconClass=\"bi bi-list\"\r\n        role=\"button\"\r\n        (click)=\"toggleNavbar()\"\r\n      ></lpx-icon>\r\n    </div>\r\n  </header>\r\n\r\n  <div class=\"user-menu-groups\" [class.d-none]=\"userMenuHidden\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </div>\r\n\r\n  <nav class=\"lpx-mobile-nav-items\" [class.d-none]=\"navItemsHidden\">\r\n    <lpx-navbar-routes\r\n      [navbarItems]=\"navService.navbarItems$ | async\"\r\n      [routerItem]=\"true\"\r\n      (routeClick)=\"toggleNavbar()\"\r\n    ></lpx-navbar-routes>\r\n  </nav>\r\n</div>\r\n\r\n<ng-template #defaultLogo>\r\n  <lpx-brand-logo></lpx-brand-logo>\r\n</ng-template>", styles: [".mobile-menu-opened :host{height:100vh;display:block}\n"], dependencies: [{ kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i1.BrandLogoComponent, selector: "lpx-brand-logo" }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }, { kind: "component", type: i1.NavbarRoutesComponent, selector: "lpx-navbar-routes", inputs: ["groupedItems", "navbarItems", "routerItem"], outputs: ["routeClick"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileNavbarComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'lpx-mobile-navbar', template: "<div class=\"lpx-mobile-navbar-container\">\r\n  <header class=\"lpx-mobile-navbar\">\r\n    <div class=\"lpx-logo-container\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"logoPanel?.template || defaultLogo\"\r\n      ></ng-container>\r\n    </div>\r\n    <div class=\"user-menu\">\r\n      <lpx-icon\r\n        iconClass=\"bi bi-person\"\r\n        role=\"button\"\r\n        (click)=\"toggleUserMenu()\"\r\n      ></lpx-icon>\r\n      <lpx-icon\r\n        iconClass=\"bi bi-list\"\r\n        role=\"button\"\r\n        (click)=\"toggleNavbar()\"\r\n      ></lpx-icon>\r\n    </div>\r\n  </header>\r\n\r\n  <div class=\"user-menu-groups\" [class.d-none]=\"userMenuHidden\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </div>\r\n\r\n  <nav class=\"lpx-mobile-nav-items\" [class.d-none]=\"navItemsHidden\">\r\n    <lpx-navbar-routes\r\n      [navbarItems]=\"navService.navbarItems$ | async\"\r\n      [routerItem]=\"true\"\r\n      (routeClick)=\"toggleNavbar()\"\r\n    ></lpx-navbar-routes>\r\n  </nav>\r\n</div>\r\n\r\n<ng-template #defaultLogo>\r\n  <lpx-brand-logo></lpx-brand-logo>\r\n</ng-template>", styles: [".mobile-menu-opened :host{height:100vh;display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.NavbarService }, { type: i1.LayoutService }], propDecorators: { logoPanel: [{
                type: ContentChild,
                args: [LogoPanelDirective]
            }] } });

class LpxMobileNavbarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxMobileNavbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: LpxMobileNavbarModule, declarations: [MobileNavbarComponent], imports: [CommonModule,
            LpxBrandLogoModule,
            LpxIconModule,
            LanguageSelectionModule,
            LpxNavbarModule], exports: [MobileNavbarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxMobileNavbarModule, imports: [CommonModule,
            LpxBrandLogoModule,
            LpxIconModule,
            LanguageSelectionModule,
            LpxNavbarModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxMobileNavbarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MobileNavbarComponent],
                    imports: [
                        CommonModule,
                        LpxBrandLogoModule,
                        LpxIconModule,
                        LanguageSelectionModule,
                        LpxNavbarModule,
                    ],
                    exports: [MobileNavbarComponent],
                }]
        }] });

class SettingsPanelDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SettingsPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: SettingsPanelDirective, isStandalone: false, selector: "ng-template[lpx-settings-panel]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SettingsPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-settings-panel]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class LanguageSelectionPanelDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: LanguageSelectionPanelDirective, isStandalone: false, selector: "ng-template[lpx-language-selection]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-language-selection]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class UserProfilePanelDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfilePanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: UserProfilePanelDirective, isStandalone: false, selector: "ng-template[lpx-user-profile]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfilePanelDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-user-profile]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class TopbarContentPanelDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TopbarContentPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: TopbarContentPanelDirective, isStandalone: false, selector: "ng-template[lpx-topbar-content]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TopbarContentPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-topbar-content]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class MobileUserProfilePanelDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileUserProfilePanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: MobileUserProfilePanelDirective, isStandalone: false, selector: "ng-template[lpx-mn-user-profile-panel]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileUserProfilePanelDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-mn-user-profile-panel]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class MobileLanguageSelectionDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileLanguageSelectionDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: MobileLanguageSelectionDirective, isStandalone: false, selector: "ng-template[lpx-mn-language-selection]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MobileLanguageSelectionDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: 'ng-template[lpx-mn-language-selection]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });

class MnUserProfileComponent {
    constructor() {
        this.service = inject(UserProfileService);
        this.user$ = this.service.user$;
        this.menuHidden = true;
    }
    toggleMenu() {
        this.menuHidden = !this.menuHidden;
    }
    onActionClick(item) {
        item.action?.();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: MnUserProfileComponent, isStandalone: false, selector: "lpx-mn-user-profile", ngImport: i0, template: "@if (user$ | async; as userProfile) {\r\n  <ng-component>\r\n    <div\r\n      class=\"lpx-user-profile btn- toggle\"\r\n      role=\"button\"\r\n      (click)=\"toggleMenu()\"\r\n    >\r\n      <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n      <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n    </div>\r\n    @if (userProfile.userActionGroups) {\r\n      <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n        @for (\r\n          actionGroup of userProfile.userActionGroups;\r\n          track $index;\r\n          let last = $last\r\n        ) {\r\n          @for (action of actionGroup; track $index) {\r\n            <a\r\n              class=\"action\"\r\n              role=\"link\"\r\n              (click)=\"onActionClick(action)\"\r\n              [routerLink]=\"action.link\"\r\n            >\r\n              {{ action?.text || '' | lpxTranslate | async }}\r\n            </a>\r\n          }\r\n\r\n          @if (!last) {\r\n            <div class=\"divider\"></div>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n  </ng-component>\r\n}\r\n", dependencies: [{ kind: "component", type: i1.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i2.ɵEmptyOutletComponent, selector: "ng-component", exportAs: ["emptyRouterOutlet"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'lpx-mn-user-profile', encapsulation: ViewEncapsulation.None, template: "@if (user$ | async; as userProfile) {\r\n  <ng-component>\r\n    <div\r\n      class=\"lpx-user-profile btn- toggle\"\r\n      role=\"button\"\r\n      (click)=\"toggleMenu()\"\r\n    >\r\n      <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n      <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n    </div>\r\n    @if (userProfile.userActionGroups) {\r\n      <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n        @for (\r\n          actionGroup of userProfile.userActionGroups;\r\n          track $index;\r\n          let last = $last\r\n        ) {\r\n          @for (action of actionGroup; track $index) {\r\n            <a\r\n              class=\"action\"\r\n              role=\"link\"\r\n              (click)=\"onActionClick(action)\"\r\n              [routerLink]=\"action.link\"\r\n            >\r\n              {{ action?.text || '' | lpxTranslate | async }}\r\n            </a>\r\n          }\r\n\r\n          @if (!last) {\r\n            <div class=\"divider\"></div>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n  </ng-component>\r\n}\r\n" }]
        }] });

class MnLanguageSelectionComponent {
    constructor() {
        this.service = inject(LanguageService);
        this.langs$ = this.service.languages$;
        this.selectedLanguage$ = this.service.selectedLanguage$;
        this.menuHidden = true;
    }
    toggleMenu() {
        this.menuHidden = !this.menuHidden;
    }
    onLanguageSelection(lang) {
        this.service.setSelectedLanguage(lang);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: MnLanguageSelectionComponent, isStandalone: false, selector: "lpx-mn-language-selection", providers: [], ngImport: i0, template: "@if (selectedLanguage$ | async; as selectedLanguage) {\r\n  <div\r\n    class=\"lpx-language-selection btn-toggle\"\r\n    role=\"button\"\r\n    (click)=\"toggleMenu()\"\r\n  >\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage?.displayName }}\r\n  </div>\r\n}\r\n\r\n@if (langs$ | async; as langs) {\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    @for (lang of langs; track $index) {\r\n      <a class=\"action\" role=\"button\" (click)=\"onLanguageSelection(lang)\">\r\n        {{ lang.displayName }}\r\n      </a>\r\n    }\r\n  </div>\r\n}\r\n", dependencies: [{ kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'lpx-mn-language-selection', encapsulation: ViewEncapsulation.None, providers: [], template: "@if (selectedLanguage$ | async; as selectedLanguage) {\r\n  <div\r\n    class=\"lpx-language-selection btn-toggle\"\r\n    role=\"button\"\r\n    (click)=\"toggleMenu()\"\r\n  >\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage?.displayName }}\r\n  </div>\r\n}\r\n\r\n@if (langs$ | async; as langs) {\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    @for (lang of langs; track $index) {\r\n      <a class=\"action\" role=\"button\" (click)=\"onLanguageSelection(lang)\">\r\n        {{ lang.displayName }}\r\n      </a>\r\n    }\r\n  </div>\r\n}\r\n" }]
        }] });

class ToolbarItemComponent {
    get badge$() {
        if (this.badge instanceof Observable) {
            return this.badge;
        }
        return of(this.badge);
    }
    actionClick() {
        if (this.action) {
            this.action();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: ToolbarItemComponent, isStandalone: true, selector: "lpx-toolbar-item", inputs: { component: "component", template: "template", icon: "icon", badge: "badge", html: "html", action: "action" }, ngImport: i0, template: "@if (component) {\r\n  <div class=\"lpx-menu-item-link\" (click)=\"actionClick()\">\r\n    <div class=\"lpx-menu-item-icon\">\r\n      <div class=\"lpx-icon\">\r\n        <ng-container *ngComponentOutlet=\"component\"></ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n} @else {\r\n  @if (template) {\r\n    <ng-container [ngTemplateOutlet]=\"template\"></ng-container>\r\n  } @else {\r\n    @if (html) {\r\n      <div [innerHtml]=\"html\" (click)=\"actionClick()\"></div>\r\n    } @else {\r\n      <a class=\"lpx-menu-item-link active-menu-item\" (click)=\"actionClick()\">\r\n        <span class=\"lpx-menu-item-icon\">\r\n          @if (badge$ | async; as badge) {\r\n            <small class=\"menu-item-badge\">{{ badge }}</small>\r\n          }\r\n          @if (icon) {\r\n            <lpx-icon class=\"action-icon\" [iconClass]=\"icon\"></lpx-icon>\r\n          }\r\n        </span>\r\n      </a>\r\n    }\r\n  }\r\n}\r\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"], exportAs: ["ngComponentOutlet"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: LpxIconModule }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-toolbar-item', imports: [CommonModule, LpxIconModule], template: "@if (component) {\r\n  <div class=\"lpx-menu-item-link\" (click)=\"actionClick()\">\r\n    <div class=\"lpx-menu-item-icon\">\r\n      <div class=\"lpx-icon\">\r\n        <ng-container *ngComponentOutlet=\"component\"></ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n} @else {\r\n  @if (template) {\r\n    <ng-container [ngTemplateOutlet]=\"template\"></ng-container>\r\n  } @else {\r\n    @if (html) {\r\n      <div [innerHtml]=\"html\" (click)=\"actionClick()\"></div>\r\n    } @else {\r\n      <a class=\"lpx-menu-item-link active-menu-item\" (click)=\"actionClick()\">\r\n        <span class=\"lpx-menu-item-icon\">\r\n          @if (badge$ | async; as badge) {\r\n            <small class=\"menu-item-badge\">{{ badge }}</small>\r\n          }\r\n          @if (icon) {\r\n            <lpx-icon class=\"action-icon\" [iconClass]=\"icon\"></lpx-icon>\r\n          }\r\n        </span>\r\n      </a>\r\n    }\r\n  }\r\n}\r\n" }]
        }], propDecorators: { component: [{
                type: Input
            }], template: [{
                type: Input
            }], icon: [{
                type: Input
            }], badge: [{
                type: Input
            }], html: [{
                type: Input
            }], action: [{
                type: Input
            }] } });

class ToolbarItemsComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarItemsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: ToolbarItemsComponent, isStandalone: true, selector: "lpx-toolbar-items", inputs: { items: "items" }, ngImport: i0, template: "@for (item of items; track $index) {\r\n  <lpx-toolbar-item\r\n    *lpxVisible=\"!item.visible || item.visible(item)\"\r\n    [icon]=\"item?.icon\"\r\n    [badge]=\"item?.badge?.count\"\r\n    [html]=\"item?.html\"\r\n    [component]=\"item?.component\"\r\n    [template]=\"item?.template\"\r\n    [action]=\"item?.action\"\r\n  ></lpx-toolbar-item>\r\n}\r\n", dependencies: [{ kind: "component", type: ToolbarItemComponent, selector: "lpx-toolbar-item", inputs: ["component", "template", "icon", "badge", "html", "action"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: LpxVisibleDirective, selector: "[lpxVisible]", inputs: ["lpxVisible"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarItemsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-toolbar-items', imports: [ToolbarItemComponent, CommonModule, LpxVisibleDirective], changeDetection: ChangeDetectionStrategy.OnPush, template: "@for (item of items; track $index) {\r\n  <lpx-toolbar-item\r\n    *lpxVisible=\"!item.visible || item.visible(item)\"\r\n    [icon]=\"item?.icon\"\r\n    [badge]=\"item?.badge?.count\"\r\n    [html]=\"item?.html\"\r\n    [component]=\"item?.component\"\r\n    [template]=\"item?.template\"\r\n    [action]=\"item?.action\"\r\n  ></lpx-toolbar-item>\r\n}\r\n" }]
        }], propDecorators: { items: [{
                type: Input
            }] } });

class ToolbarComponent {
    constructor() {
        this.toolbarService = inject(ToolbarService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: ToolbarComponent, isStandalone: true, selector: "lpx-toolbar", ngImport: i0, template: "<lpx-toolbar-items\r\n  class=\"lpx-topbar-content\"\r\n  [items]=\"(toolbarService.items$ | async) || []\"\r\n>\r\n</lpx-toolbar-items>\r\n", dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: ToolbarItemsComponent, selector: "lpx-toolbar-items", inputs: ["items"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-toolbar', imports: [AsyncPipe, ToolbarItemsComponent], changeDetection: ChangeDetectionStrategy.OnPush, template: "<lpx-toolbar-items\r\n  class=\"lpx-topbar-content\"\r\n  [items]=\"(toolbarService.items$ | async) || []\"\r\n>\r\n</lpx-toolbar-items>\r\n" }]
        }] });

class ToolbarContainerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: ToolbarContainerComponent, isStandalone: true, selector: "lpx-toolbar-container", ngImport: i0, template: "<lpx-toolbar></lpx-toolbar>\r\n", dependencies: [{ kind: "component", type: ToolbarComponent, selector: "lpx-toolbar" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: ToolbarContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-toolbar-container', imports: [ToolbarComponent], template: "<lpx-toolbar></lpx-toolbar>\r\n" }]
        }] });

class SideMenuLayoutComponent {
    constructor() {
        this.layoutService = inject(LayoutService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: SideMenuLayoutComponent, isStandalone: false, selector: "lpx-layout", queries: [{ propertyName: "navbarPanel", first: true, predicate: NavbarPanelDirective, descendants: true }, { propertyName: "mobileNavbarPanel", first: true, predicate: MobileNavbarPanelDirective, descendants: true }, { propertyName: "breadcrumbPanel", first: true, predicate: BreadcrumbPanelDirective, descendants: true }, { propertyName: "settingsPanel", first: true, predicate: SettingsPanelDirective, descendants: true }, { propertyName: "languageSelectionPanelDirective", first: true, predicate: LanguageSelectionPanelDirective, descendants: true }, { propertyName: "topbarContentPanelDirective", first: true, predicate: TopbarContentPanelDirective, descendants: true }, { propertyName: "navItemsPanelDirective", first: true, predicate: TopbarContentPanelDirective, descendants: true }, { propertyName: "userProfilePanelDirective", first: true, predicate: UserProfilePanelDirective, descendants: true }, { propertyName: "footerPanelDirective", first: true, predicate: FooterPanelDirective, descendants: true }, { propertyName: "navitemPanelDirective", first: true, predicate: NavitemPanelDirective, descendants: true }, { propertyName: "mobileUserProfilePanelDirective", first: true, predicate: MobileUserProfilePanelDirective, descendants: true }, { propertyName: "mobileLanguageSelectionDirective", first: true, predicate: MobileLanguageSelectionDirective, descendants: true }, { propertyName: "logoPanel", first: true, predicate: LogoPanelDirective, descendants: true }, { propertyName: "contentPanel", first: true, predicate: ContentPanelDirective, descendants: true }], ngImport: i0, template: "@if (layoutService.containerClass$ | async; as containerClass) {\r\n  <div id=\"lpx-wrapper\" [ngClass]=\"containerClass\">\r\n    <ng-container\r\n      *ngTemplateOutlet=\"mobileNavbarPanel?.template || defaultMobileNavbar\"\r\n    />\r\n    <ng-template #defaultMobileNavbar>\r\n      <lpx-mobile-navbar *lpxResponsive=\"'all md-none'\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"\r\n            mobileUserProfilePanelDirective?.template ||\r\n            defaultMobileUserProfile\r\n          \"\r\n        />\r\n        <ng-template #defaultMobileUserProfile>\r\n          <lpx-mn-user-profile class=\"d-block\" />\r\n        </ng-template>\r\n\r\n        <ng-container\r\n          *ngTemplateOutlet=\"\r\n            mobileLanguageSelectionDirective?.template ||\r\n            defaultMobilLanguageSelection\r\n          \"\r\n        />\r\n        <ng-template #defaultMobilLanguageSelection>\r\n          <lpx-mn-language-selection class=\"d-block\" />\r\n        </ng-template>\r\n        @if (logoPanel?.template) {\r\n          <ng-container>\r\n            <ng-template lpx-logo-panel>\r\n              <ng-container *ngTemplateOutlet=\"logoPanel!.template\" />\r\n            </ng-template>\r\n          </ng-container>\r\n        }\r\n      </lpx-mobile-navbar>\r\n    </ng-template>\r\n\r\n    <div class=\"lpx-sidebar-container\" *lpxResponsive=\"'md'\">\r\n      <div class=\"lpx-sidebar lpx-scroll-container\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"navbarPanel?.template || defaultNavbar\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"lpx-content-container\">\r\n      <div class=\"lpx-topbar-container\">\r\n        <div class=\"lpx-topbar\">\r\n          <div class=\"lpx-breadcrumb-container\">\r\n            <ng-container *lpxResponsive=\"'md'\">\r\n              <ng-container\r\n                *ngTemplateOutlet=\"\r\n                  breadcrumbPanel?.template || defaultBreadcrumb\r\n                \"\r\n              />\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"lpx-topbar-content\" *lpxResponsive=\"'md'\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"\r\n                topbarContentPanelDirective?.template || defaultTopbarContent\r\n              \"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"lpx-content\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"contentPanel?.template || defaultContent\"\r\n        />\r\n        <ng-template #defaultContent>\r\n          <ng-content />\r\n        </ng-template>\r\n        <ng-container\r\n          *ngTemplateOutlet=\"footerPanelDirective?.template || defaultFooter\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n<ng-template #defaultTopbarContent>\r\n  <lpx-toolbar-container />\r\n</ng-template>\r\n\r\n<ng-template #defaultNavbar>\r\n  <lpx-navbar>\r\n    @if (logoPanel?.template) {\r\n      <ng-template lpx-logo-panel>\r\n        <ng-container *ngTemplateOutlet=\"logoPanel!.template\" />\r\n      </ng-template>\r\n    }\r\n  </lpx-navbar>\r\n</ng-template>\r\n\r\n<ng-template #defaultLogo>\r\n  <lpx-brand-logo />\r\n</ng-template>\r\n\r\n<ng-template #defaultBreadcrumb>\r\n  <lpx-breadcrumb />\r\n</ng-template>\r\n\r\n<ng-template #defaultUserProfile>\r\n  <lpx-user-profile />\r\n</ng-template>\r\n\r\n<ng-template #defaultLanguageSelection>\r\n  <lpx-language-selection />\r\n</ng-template>\r\n\r\n<ng-template #defaultFooter>\r\n  <lpx-footer />\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i1.NavbarComponent, selector: "lpx-navbar" }, { kind: "component", type: i1.BreadcrumbComponent, selector: "lpx-breadcrumb" }, { kind: "directive", type: i1.ResponsiveDirective, selector: "[lpxResponsive]", inputs: ["lpxResponsive"] }, { kind: "component", type: i3.UserProfileComponent, selector: "lpx-user-profile" }, { kind: "component", type: i3.LanguageSelectionComponent, selector: "lpx-language-selection" }, { kind: "component", type: MobileNavbarComponent, selector: "lpx-mobile-navbar" }, { kind: "component", type: MnUserProfileComponent, selector: "lpx-mn-user-profile" }, { kind: "component", type: MnLanguageSelectionComponent, selector: "lpx-mn-language-selection" }, { kind: "component", type: i1.FooterComponent, selector: "lpx-footer" }, { kind: "directive", type: i1.LogoPanelDirective, selector: "ng-template[lpx-logo-panel]" }, { kind: "component", type: i1.BrandLogoComponent, selector: "lpx-brand-logo" }, { kind: "component", type: ToolbarContainerComponent, selector: "lpx-toolbar-container" }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'lpx-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (layoutService.containerClass$ | async; as containerClass) {\r\n  <div id=\"lpx-wrapper\" [ngClass]=\"containerClass\">\r\n    <ng-container\r\n      *ngTemplateOutlet=\"mobileNavbarPanel?.template || defaultMobileNavbar\"\r\n    />\r\n    <ng-template #defaultMobileNavbar>\r\n      <lpx-mobile-navbar *lpxResponsive=\"'all md-none'\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"\r\n            mobileUserProfilePanelDirective?.template ||\r\n            defaultMobileUserProfile\r\n          \"\r\n        />\r\n        <ng-template #defaultMobileUserProfile>\r\n          <lpx-mn-user-profile class=\"d-block\" />\r\n        </ng-template>\r\n\r\n        <ng-container\r\n          *ngTemplateOutlet=\"\r\n            mobileLanguageSelectionDirective?.template ||\r\n            defaultMobilLanguageSelection\r\n          \"\r\n        />\r\n        <ng-template #defaultMobilLanguageSelection>\r\n          <lpx-mn-language-selection class=\"d-block\" />\r\n        </ng-template>\r\n        @if (logoPanel?.template) {\r\n          <ng-container>\r\n            <ng-template lpx-logo-panel>\r\n              <ng-container *ngTemplateOutlet=\"logoPanel!.template\" />\r\n            </ng-template>\r\n          </ng-container>\r\n        }\r\n      </lpx-mobile-navbar>\r\n    </ng-template>\r\n\r\n    <div class=\"lpx-sidebar-container\" *lpxResponsive=\"'md'\">\r\n      <div class=\"lpx-sidebar lpx-scroll-container\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"navbarPanel?.template || defaultNavbar\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"lpx-content-container\">\r\n      <div class=\"lpx-topbar-container\">\r\n        <div class=\"lpx-topbar\">\r\n          <div class=\"lpx-breadcrumb-container\">\r\n            <ng-container *lpxResponsive=\"'md'\">\r\n              <ng-container\r\n                *ngTemplateOutlet=\"\r\n                  breadcrumbPanel?.template || defaultBreadcrumb\r\n                \"\r\n              />\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"lpx-topbar-content\" *lpxResponsive=\"'md'\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"\r\n                topbarContentPanelDirective?.template || defaultTopbarContent\r\n              \"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"lpx-content\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"contentPanel?.template || defaultContent\"\r\n        />\r\n        <ng-template #defaultContent>\r\n          <ng-content />\r\n        </ng-template>\r\n        <ng-container\r\n          *ngTemplateOutlet=\"footerPanelDirective?.template || defaultFooter\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n<ng-template #defaultTopbarContent>\r\n  <lpx-toolbar-container />\r\n</ng-template>\r\n\r\n<ng-template #defaultNavbar>\r\n  <lpx-navbar>\r\n    @if (logoPanel?.template) {\r\n      <ng-template lpx-logo-panel>\r\n        <ng-container *ngTemplateOutlet=\"logoPanel!.template\" />\r\n      </ng-template>\r\n    }\r\n  </lpx-navbar>\r\n</ng-template>\r\n\r\n<ng-template #defaultLogo>\r\n  <lpx-brand-logo />\r\n</ng-template>\r\n\r\n<ng-template #defaultBreadcrumb>\r\n  <lpx-breadcrumb />\r\n</ng-template>\r\n\r\n<ng-template #defaultUserProfile>\r\n  <lpx-user-profile />\r\n</ng-template>\r\n\r\n<ng-template #defaultLanguageSelection>\r\n  <lpx-language-selection />\r\n</ng-template>\r\n\r\n<ng-template #defaultFooter>\r\n  <lpx-footer />\r\n</ng-template>\r\n" }]
        }], ctorParameters: () => [], propDecorators: { navbarPanel: [{
                type: ContentChild,
                args: [NavbarPanelDirective]
            }], mobileNavbarPanel: [{
                type: ContentChild,
                args: [MobileNavbarPanelDirective]
            }], breadcrumbPanel: [{
                type: ContentChild,
                args: [BreadcrumbPanelDirective]
            }], settingsPanel: [{
                type: ContentChild,
                args: [SettingsPanelDirective]
            }], languageSelectionPanelDirective: [{
                type: ContentChild,
                args: [LanguageSelectionPanelDirective]
            }], topbarContentPanelDirective: [{
                type: ContentChild,
                args: [TopbarContentPanelDirective]
            }], navItemsPanelDirective: [{
                type: ContentChild,
                args: [TopbarContentPanelDirective]
            }], userProfilePanelDirective: [{
                type: ContentChild,
                args: [UserProfilePanelDirective]
            }], footerPanelDirective: [{
                type: ContentChild,
                args: [FooterPanelDirective]
            }], navitemPanelDirective: [{
                type: ContentChild,
                args: [NavitemPanelDirective]
            }], mobileUserProfilePanelDirective: [{
                type: ContentChild,
                args: [MobileUserProfilePanelDirective]
            }], mobileLanguageSelectionDirective: [{
                type: ContentChild,
                args: [MobileLanguageSelectionDirective]
            }], logoPanel: [{
                type: ContentChild,
                args: [LogoPanelDirective]
            }], contentPanel: [{
                type: ContentChild,
                args: [ContentPanelDirective]
            }] } });

const LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN = new InjectionToken('LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN');

const layoutBundleName = 'layout-bundle';
const getSideMenuLayoutStylesProvider = (styleFactory) => [
    {
        provide: LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN,
        useFactory: () => {
            return [
                {
                    bundleName: layoutBundleName,
                },
            ];
        },
    },
    provideAppInitializer(() => {
        inject(LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN);
    }),
    {
        provide: LPX_LAYOUT_STYLE_FINAL,
        deps: [LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN],
        useFactory: createStyleFactory(styleFactory),
    },
];

class MnUserProfileModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileModule, declarations: [MnUserProfileComponent], imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule], exports: [MnUserProfileComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileModule, imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnUserProfileModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MnUserProfileComponent],
                    imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule],
                    exports: [MnUserProfileComponent],
                }]
        }] });

class MnLanguageSelectionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionModule, declarations: [MnLanguageSelectionComponent], imports: [CommonModule, LpxIconModule], exports: [MnLanguageSelectionComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionModule, imports: [CommonModule, LpxIconModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: MnLanguageSelectionModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MnLanguageSelectionComponent],
                    imports: [CommonModule, LpxIconModule],
                    exports: [MnLanguageSelectionComponent],
                }]
        }] });

const declarationsWithExports = [
    SideMenuLayoutComponent,
    SettingsPanelDirective,
    LanguageSelectionPanelDirective,
    TopbarContentPanelDirective,
    UserProfilePanelDirective,
    MobileUserProfilePanelDirective,
    MobileLanguageSelectionDirective,
];
class LpxSideMenuLayoutModule {
    static forRoot(options) {
        return {
            ngModule: LpxSideMenuLayoutModule,
            providers: [getSideMenuLayoutStylesProvider(options?.styleFactory)],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxSideMenuLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: LpxSideMenuLayoutModule, declarations: [SideMenuLayoutComponent,
            SettingsPanelDirective,
            LanguageSelectionPanelDirective,
            TopbarContentPanelDirective,
            UserProfilePanelDirective,
            MobileUserProfilePanelDirective,
            MobileLanguageSelectionDirective], imports: [CommonModule,
            LpxNavbarModule,
            LpxBreadcrumbModule,
            LpxResponsiveModule,
            UserProfileModule,
            LanguageSelectionModule,
            LpxMobileNavbarModule,
            MnUserProfileModule,
            MnLanguageSelectionModule,
            LpxFooterModule,
            PanelsModule,
            LpxBrandLogoModule,
            ToolbarContainerComponent], exports: [SideMenuLayoutComponent,
            SettingsPanelDirective,
            LanguageSelectionPanelDirective,
            TopbarContentPanelDirective,
            UserProfilePanelDirective,
            MobileUserProfilePanelDirective,
            MobileLanguageSelectionDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxSideMenuLayoutModule, imports: [CommonModule,
            LpxNavbarModule,
            LpxBreadcrumbModule,
            LpxResponsiveModule,
            UserProfileModule,
            LanguageSelectionModule,
            LpxMobileNavbarModule,
            MnUserProfileModule,
            MnLanguageSelectionModule,
            LpxFooterModule,
            PanelsModule,
            LpxBrandLogoModule,
            ToolbarContainerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LpxSideMenuLayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...declarationsWithExports],
                    imports: [
                        CommonModule,
                        LpxNavbarModule,
                        LpxBreadcrumbModule,
                        LpxResponsiveModule,
                        UserProfileModule,
                        LanguageSelectionModule,
                        LpxMobileNavbarModule,
                        MnUserProfileModule,
                        MnLanguageSelectionModule,
                        LpxFooterModule,
                        PanelsModule,
                        LpxBrandLogoModule,
                        ToolbarContainerComponent
                    ],
                    exports: [...declarationsWithExports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LanguageSelectionPanelDirective, LpxMobileNavbarModule, LpxSideMenuLayoutModule, MnLanguageSelectionComponent, MnLanguageSelectionModule, MnUserProfileComponent, MnUserProfileModule, MobileLanguageSelectionDirective, MobileNavbarComponent, MobileUserProfilePanelDirective, SettingsPanelDirective, SideMenuLayoutComponent, ToolbarContainerComponent, TopbarContentPanelDirective, UserProfilePanelDirective };
//# sourceMappingURL=volo-ngx-lepton-x.lite-layouts.mjs.map
