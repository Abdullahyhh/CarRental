import * as i1 from '@abp/ng.core';
import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';

var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Abp: index$1
});

class EmailSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SettingManagement';
        this.get = (config) => this.restService.request({
            method: 'GET',
            url: '/api/setting-management/emailing',
        }, { apiName: this.apiName, ...config });
        this.sendTestEmail = (input, config) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing/send-test-email',
            body: input,
        }, { apiName: this.apiName, ...config });
        this.update = (input, config) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing',
            body: input,
        }, { apiName: this.apiName, ...config });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: EmailSettingsService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: EmailSettingsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: EmailSettingsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.RestService }] });

class TimeZoneSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SettingManagement';
        this.get = (config) => this.restService.request({
            method: 'GET',
            responseType: 'text',
            url: '/api/setting-management/timezone',
        }, { apiName: this.apiName, ...config });
        this.getTimezones = (config) => this.restService.request({
            method: 'GET',
            url: '/api/setting-management/timezone/timezones',
        }, { apiName: this.apiName, ...config });
        this.update = (timezone, config) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/timezone',
            params: { timezone },
        }, { apiName: this.apiName, ...config });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TimeZoneSettingsService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TimeZoneSettingsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TimeZoneSettingsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.RestService }] });

/**
 * Generated bundle index. Do not edit.
 */

export { EmailSettingsService, TimeZoneSettingsService, index as Volo };
//# sourceMappingURL=abp-ng.setting-management-proxy.mjs.map
