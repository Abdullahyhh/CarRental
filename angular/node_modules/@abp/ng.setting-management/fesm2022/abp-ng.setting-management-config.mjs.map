{"version":3,"file":"abp-ng.setting-management-config.mjs","sources":["../../../../packages/setting-management/config/src/lib/components/email-setting-group/email-setting-group.component.ts","../../../../packages/setting-management/config/src/lib/components/email-setting-group/email-setting-group.component.html","../../../../packages/setting-management/config/src/lib/services/settings-tabs.service.ts","../../../../packages/setting-management/config/src/lib/providers/route.provider.ts","../../../../packages/setting-management/config/src/lib/providers/setting-tab.provider.ts","../../../../packages/setting-management/config/src/lib/providers/features.token.ts","../../../../packages/setting-management/config/src/lib/providers/visible.provider.ts","../../../../packages/setting-management/config/src/lib/providers/setting-management-config.provider.ts","../../../../packages/setting-management/config/src/lib/proxy/email-settings.service.ts","../../../../packages/setting-management/config/src/lib/setting-management-config.module.ts","../../../../packages/setting-management/config/src/abp-ng.setting-management-config.ts"],"sourcesContent":["import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';\r\nimport { collapse, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { SettingManagementPolicyNames } from '../../enums/policy-names';\r\nimport { EmailSettingsService } from '@abp/ng.setting-management/proxy';\r\nimport { EmailSettingsDto } from '../../proxy/models';\r\nimport { ConfigStateService, LocalizationService } from '@abp/ng.core';\r\n\r\nconst { required, email } = Validators;\r\n\r\n@Component({\r\n  standalone: false,\r\n  selector: 'abp-email-setting-group',\r\n  templateUrl: 'email-setting-group.component.html',\r\n  animations: [collapse],\r\n})\r\nexport class EmailSettingGroupComponent implements OnInit {\r\n  protected readonly localizationService = inject(LocalizationService);\r\n  protected readonly configStateSevice = inject(ConfigStateService);\r\n  protected readonly currentUserEmail = toSignal(\r\n    this.configStateSevice.getDeep$(['currentUser', 'email']),\r\n  );\r\n\r\n  form!: UntypedFormGroup;\r\n  emailTestForm: UntypedFormGroup;\r\n  saving = false;\r\n  emailingPolicy = SettingManagementPolicyNames.Emailing;\r\n  isEmailTestModalOpen = false;\r\n  modalSize: NgbModalOptions = { size: 'lg' };\r\n\r\n  constructor(\r\n    private emailSettingsService: EmailSettingsService,\r\n    private fb: UntypedFormBuilder,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getData();\r\n  }\r\n\r\n  private getData() {\r\n    this.emailSettingsService.get().subscribe(res => {\r\n      this.buildForm(res);\r\n    });\r\n  }\r\n\r\n  private buildForm(emailSettings: EmailSettingsDto) {\r\n    this.form = this.fb.group({\r\n      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],\r\n      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],\r\n      smtpHost: [emailSettings.smtpHost],\r\n      smtpPort: [emailSettings.smtpPort, [Validators.required]],\r\n      smtpEnableSsl: [emailSettings.smtpEnableSsl],\r\n      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],\r\n      smtpDomain: [emailSettings.smtpDomain],\r\n      smtpUserName: [emailSettings.smtpUserName],\r\n      smtpPassword: [emailSettings.smtpPassword],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.saving || this.form.invalid) return;\r\n\r\n    this.saving = true;\r\n    this.emailSettingsService\r\n      .update(this.form.value)\r\n      .pipe(finalize(() => (this.saving = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpSettingManagement::SavedSuccessfully');\r\n        this.getData();\r\n      });\r\n  }\r\n\r\n  openSendEmailModal() {\r\n    this.buildEmailTestForm();\r\n    this.isEmailTestModalOpen = true;\r\n  }\r\n\r\n  buildEmailTestForm() {\r\n    const { defaultFromAddress } = this.form.value || {};\r\n    const defaultSubject = this.localizationService.instant(\r\n      'AbpSettingManagement::TestEmailSubject',\r\n      ...[Math.floor(Math.random() * 9999).toString()],\r\n    );\r\n    const defaultBody = this.localizationService.instant('AbpSettingManagement::TestEmailBody');\r\n\r\n    this.emailTestForm = this.fb.group({\r\n      senderEmailAddress: [defaultFromAddress || '', [required, email]],\r\n      targetEmailAddress: [this.currentUserEmail(), [required, email]],\r\n      subject: [defaultSubject, [required]],\r\n      body: [defaultBody],\r\n    });\r\n  }\r\n\r\n  emailTestFormSubmit() {\r\n    if (this.emailTestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.emailSettingsService.sendTestEmail(this.emailTestForm.value).subscribe(res => {\r\n      this.toasterService.success('AbpSettingManagement::SuccessfullySent');\r\n      this.isEmailTestModalOpen = false;\r\n    });\r\n  }\r\n}\r\n","@if (form) {\r\n  <form [formGroup]=\"form\" class=\"py-2 abp-md-form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\"\r\n        >{{ 'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n        }}<span class=\"ms-1\">*</span></label\r\n      >\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n    </div>\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\"\r\n        >{{ 'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n        }}<span class=\"ms-1\">*</span></label\r\n      >\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n    </div>\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n    </div>\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\"\r\n        >{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}<span class=\"ms-1\">*</span></label\r\n      >\r\n      <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n    </div>\r\n\r\n    <div class=\"form-check mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"smtp-enable-ssl\"\r\n        class=\"form-check-input\"\r\n        formControlName=\"smtpEnableSsl\"\r\n      />\r\n      <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n        'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n    <div class=\"form-check mb-2\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"smtp-use-default-credentials\"\r\n        class=\"form-check-input\"\r\n        formControlName=\"smtpUseDefaultCredentials\"\r\n      />\r\n      <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n        'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n      }}</label>\r\n    </div>\r\n\r\n    <div\r\n      [@collapse]=\"{\r\n        value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n        params: { time: '200ms', easing: 'linear' },\r\n      }\"\r\n    >\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n        <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{\r\n          'AbpSettingManagement::SmtpUserName' | abpLocalization\r\n        }}</label>\r\n        <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label class=\"form-label\">{{\r\n          'AbpSettingManagement::SmtpPassword' | abpLocalization\r\n        }}</label>\r\n        <input type=\"password\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <abp-button buttonType=\"submit\" iconClass=\"fa fa-save\">\r\n      {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n    </abp-button>\r\n    <button\r\n      *abpPermission=\"emailingPolicy\"\r\n      type=\"button\"\r\n      (click)=\"openSendEmailModal()\"\r\n      class=\"btn btn-primary mx-2\"\r\n    >\r\n      <i class=\"fa f-send\" aria-hidden=\"true\"></i>\r\n      {{ 'AbpSettingManagement::SendTestEmail' | abpLocalization }}\r\n    </button>\r\n  </form>\r\n}\r\n\r\n<abp-modal [(visible)]=\"isEmailTestModalOpen\" [options]=\"modalSize\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ 'AbpSettingManagement::SendTestEmail' | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"emailTestForm\" id=\"emailTestForm\" (ngSubmit)=\"emailTestFormSubmit()\">\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{\r\n          'AbpSettingManagement::SenderEmailAddress' | abpLocalization\r\n        }}</label>\r\n        <input class=\"form-control\" formControlName=\"senderEmailAddress\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{\r\n          'AbpSettingManagement::TargetEmailAddress' | abpLocalization\r\n        }}</label>\r\n        <input class=\"form-control\" formControlName=\"targetEmailAddress\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Subject' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"subject\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Body' | abpLocalization }}</label>\r\n        <textarea class=\"form-control\" formControlName=\"body\"></textarea>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <abp-button\r\n      buttonType=\"submit\"\r\n      iconClass=\"fa fa-send\"\r\n      formName=\"emailTestForm\"\r\n      [disabled]=\"emailTestForm.invalid && emailTestForm.dirty\"\r\n    >\r\n      <span>{{ 'AbpSettingManagement::Send' | abpLocalization }}</span>\r\n    </abp-button>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\r\n      {{ 'AbpUi::Close' | abpLocalization }}\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n","import { Injectable } from '@angular/core';\r\nimport { ABP, AbstractNavTreeService } from '@abp/ng.core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SettingTabsService extends AbstractNavTreeService<ABP.Tab> {}\r\n","import { eLayoutType, RoutesService } from '@abp/ng.core';\r\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\r\nimport { inject, InjectionToken, provideAppInitializer } from '@angular/core';\r\nimport { debounceTime, map } from 'rxjs/operators';\r\nimport { eSettingManagementRouteNames } from '../enums/route-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport function configureRoutes() {\r\n  const routesService = inject(RoutesService);\r\n  routesService.add([\r\n    {\r\n      name: eSettingManagementRouteNames.Settings,\r\n      path: '/setting-management',\r\n      parentName: eThemeSharedRouteNames.Administration,\r\n      layout: eLayoutType.application,\r\n      order: 100,\r\n      iconClass: 'fa fa-cog',\r\n    },\r\n  ]);\r\n}\r\n\r\nexport const SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_HAS_SETTING',\r\n  {\r\n    factory: () => {\r\n      const settingTabsService = inject(SettingTabsService);\r\n      return settingTabsService.visible$.pipe(\r\n        debounceTime(0),\r\n        map(nodes => !!nodes.length),\r\n      );\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [\r\n  provideAppInitializer(() => {\r\n    configureRoutes();\r\n    inject(SETTING_MANAGEMENT_HAS_SETTING);\r\n  }),\r\n];\r\n","import { inject, provideAppInitializer } from '@angular/core';\r\nimport { EmailSettingGroupComponent } from '../components/email-setting-group/email-setting-group.component';\r\nimport { eSettingManamagementSettingTabNames } from '../enums/setting-tab-names';\r\nimport { SettingTabsService } from '../services/settings-tabs.service';\r\n\r\nexport const SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS = [\r\n  provideAppInitializer(() => {\r\n    configureSettingTabs();\r\n  }),\r\n];\r\n\r\nexport function configureSettingTabs() {\r\n  const settingTabs = inject(SettingTabsService);\r\n  settingTabs.add([\r\n    {\r\n      name: eSettingManamagementSettingTabNames.EmailSettingGroup,\r\n      order: 100,\r\n      requiredPolicy: 'SettingManagement.Emailing',\r\n      component: EmailSettingGroupComponent,\r\n    },\r\n  ]);\r\n}\r\n","import { ConfigStateService, featuresFactory } from '@abp/ng.core';\r\nimport { inject, InjectionToken, provideAppInitializer } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES = new InjectionToken<Observable<{ enable: boolean }>>(\r\n  'SETTING_MANAGEMENT_FEATURES',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const configState = inject(ConfigStateService);\r\n      const featureKey = 'SettingManagement.Enable';\r\n      const mapFn = (features: Record<string, string>) => ({\r\n        enable: features[featureKey].toLowerCase() !== 'false',\r\n      });\r\n      return featuresFactory(configState, [featureKey], mapFn);\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_ROUTE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n  'SETTING_MANAGEMENT_ROUTE_VISIBILITY',\r\n  {\r\n    providedIn: 'root',\r\n    factory: () => {\r\n      const stream = inject(SETTING_MANAGEMENT_FEATURES);\r\n      return stream.pipe(map(features => features.enable));\r\n    },\r\n  },\r\n);\r\n\r\nexport const SETTING_MANAGEMENT_FEATURES_PROVIDERS = [\r\n  provideAppInitializer(() => {\r\n    inject(SETTING_MANAGEMENT_ROUTE_VISIBILITY);\r\n  }),\r\n];\r\n","import { Injector, inject, provideAppInitializer } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { RoutesService } from '@abp/ng.core';\r\nimport { SETTING_MANAGEMENT_HAS_SETTING } from './route.provider';\r\nimport { SETTING_MANAGEMENT_ROUTE_VISIBILITY } from './features.token';\r\nimport { eSettingManagementRouteNames } from '../enums';\r\n\r\nexport const SETTING_MANAGEMENT_VISIBLE_PROVIDERS = [\r\n  provideAppInitializer(() => {\r\n    setSettingManagementVisibility();\r\n  }),\r\n];\r\n\r\nexport function setSettingManagementVisibility() {\r\n  const injector = inject(Injector);\r\n  const settingManagementHasSetting$ = injector.get(SETTING_MANAGEMENT_HAS_SETTING);\r\n  const isSettingManagementFeatureEnable$ = injector.get(SETTING_MANAGEMENT_ROUTE_VISIBILITY);\r\n  const routes = injector.get(RoutesService);\r\n  combineLatest([settingManagementHasSetting$, isSettingManagementFeatureEnable$]).subscribe(\r\n    ([settingManagementHasSetting, isSettingManagementFeatureEnable]) => {\r\n      routes.patch(eSettingManagementRouteNames.Settings, {\r\n        invisible: !(settingManagementHasSetting && isSettingManagementFeatureEnable),\r\n      });\r\n    },\r\n  );\r\n}\r\n","import { makeEnvironmentProviders } from '@angular/core';\r\nimport {\r\n  SETTING_MANAGEMENT_FEATURES_PROVIDERS,\r\n  SETTING_MANAGEMENT_ROUTE_PROVIDERS,\r\n  SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS,\r\n  SETTING_MANAGEMENT_VISIBLE_PROVIDERS,\r\n} from './';\r\n\r\nexport function provideSettingManagementConfig() {\r\n  return makeEnvironmentProviders([\r\n    SETTING_MANAGEMENT_ROUTE_PROVIDERS,\r\n    SETTING_MANAGEMENT_SETTING_TAB_PROVIDERS,\r\n    SETTING_MANAGEMENT_FEATURES_PROVIDERS,\r\n    SETTING_MANAGEMENT_VISIBLE_PROVIDERS,\r\n  ]);\r\n}\r\n","import type { EmailSettingsDto, SendTestEmailInput, UpdateEmailSettingsDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n@deprecated This method is deprecated, use it from @abp/ng.setting-management/proxy\r\n*/\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmailSettingsService {\r\n  apiName = 'SettingManagement';\r\n\r\n  get = () =>\r\n    this.restService.request<any, EmailSettingsDto>({\r\n      method: 'GET',\r\n      url: '/api/setting-management/emailing',\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  sendTestEmail = (input: SendTestEmailInput) =>\r\n    this.restService.request<any, void>({\r\n      method: 'POST',\r\n      url: '/api/setting-management/emailing/send-test-email',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  update = (input: UpdateEmailSettingsDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'POST',\r\n      url: '/api/setting-management/emailing',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CoreModule } from '@abp/ng.core';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { EmailSettingGroupComponent } from './components/email-setting-group/email-setting-group.component';\r\nimport { provideSettingManagementConfig } from './providers';\r\n\r\n@NgModule({\r\n  imports: [CoreModule, ThemeSharedModule, NgxValidateCoreModule],\r\n  declarations: [EmailSettingGroupComponent],\r\n  exports: [EmailSettingGroupComponent],\r\n})\r\nexport class SettingManagementConfigModule {\r\n  /**\r\n   * @deprecated forRoot method is deprecated, use `provideSettingManagementConfig` *function* for config settings.\r\n   */\r\n  static forRoot(): ModuleWithProviders<SettingManagementConfigModule> {\r\n    return {\r\n      ngModule: SettingManagementConfigModule,\r\n      providers: [provideSettingManagementConfig()],\r\n    };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}