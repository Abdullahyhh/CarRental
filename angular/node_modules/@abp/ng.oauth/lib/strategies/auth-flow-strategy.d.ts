import { Injector } from '@angular/core';
import { Params, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthConfig, OAuthService as OAuthService2 } from 'angular-oauth2-oidc';
import { AbpLocalStorageService, AbpWindowService, ConfigStateService, EnvironmentService, HttpErrorReporterService, LoginParams, SessionStateService } from '@abp/ng.core';
import { OAuthErrorFilterService } from '../services';
import { RememberMeService } from '../services/remember-me.service';
export declare abstract class AuthFlowStrategy {
    protected injector: Injector;
    abstract readonly isInternalAuth: boolean;
    protected httpErrorReporter: HttpErrorReporterService;
    protected environment: EnvironmentService;
    protected configState: ConfigStateService;
    protected oAuthService: OAuthService2;
    protected oAuthConfig: AuthConfig;
    protected sessionState: SessionStateService;
    protected localStorageService: AbpLocalStorageService;
    protected rememberMeService: RememberMeService;
    protected windowService: AbpWindowService;
    protected tenantKey: string;
    protected router: Router;
    protected readonly oAuthErrorFilterService: OAuthErrorFilterService;
    abstract checkIfInternalAuth(queryParams?: Params): boolean;
    abstract navigateToLogin(queryParams?: Params): void;
    abstract logout(queryParams?: Params): Observable<any>;
    abstract login(params?: LoginParams | Params): Observable<any>;
    private catchError;
    constructor(injector: Injector);
    init(): Promise<any>;
    protected navigateToPreviousUrl(): void;
    protected refreshToken(): Promise<void | import("angular-oauth2-oidc").TokenResponse>;
    protected listenToOauthErrors(): void;
}
