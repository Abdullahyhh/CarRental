import { CoreModule } from '@abp/ng.core';
import * as i1 from '@abp/ng.theme.shared';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { InjectionToken, Input, Optional, Inject, Directive, ViewEncapsulation, Component, ContentChild, NgModule } from '@angular/core';
import { of, Observable } from 'rxjs';
import * as i2 from '@abp/ng.components/extensible';
import { PageToolbarComponent } from '@abp/ng.components/extensible';

const PAGE_RENDER_STRATEGY = new InjectionToken('PAGE_RENDER_STRATEGY');
class PagePartDirective {
    set abpPagePart(type) {
        this.type = type;
        this.createRenderStream(type);
    }
    constructor(templateRef, viewContainer, renderLogic, injector) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.renderLogic = renderLogic;
        this.injector = injector;
        this.hasRendered = false;
        this.render = (shouldRender) => {
            if (shouldRender && !this.hasRendered) {
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.hasRendered = true;
            }
            else if (!shouldRender && this.hasRendered) {
                this.viewContainer.clear();
                this.hasRendered = false;
            }
        };
    }
    ngOnChanges({ context }) {
        if (this.renderLogic?.onContextUpdate) {
            this.renderLogic.onContextUpdate(context);
        }
    }
    ngOnInit() {
        if (this.renderLogic?.onInit) {
            this.renderLogic.onInit(this.type, this.injector, this.context);
        }
    }
    ngOnDestroy() {
        this.clearSubscription();
        if (this.renderLogic?.onDestroy) {
            this.renderLogic.onDestroy(this.type, this.injector, this.context);
        }
    }
    shouldRender(type) {
        if (this.renderLogic) {
            const willRender = this.renderLogic.shouldRender(type);
            return willRender instanceof Observable ? willRender : of(willRender);
        }
        return of(true);
    }
    createRenderStream(type) {
        this.clearSubscription();
        this.subscription = this.shouldRender(type).subscribe(this.render);
    }
    clearSubscription() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PagePartDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: PAGE_RENDER_STRATEGY, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: PagePartDirective, isStandalone: false, selector: "[abpPagePart]", inputs: { context: ["abpPagePartContext", "context"], abpPagePart: "abpPagePart" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PagePartDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[abpPagePart]',
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAGE_RENDER_STRATEGY]
                }] }, { type: i0.Injector }], propDecorators: { context: [{
                type: Input,
                args: ['abpPagePartContext']
            }], abpPagePart: [{
                type: Input
            }] } });

var PageParts;
(function (PageParts) {
    PageParts["title"] = "PageTitleContainerComponent";
    PageParts["breadcrumb"] = "PageBreadcrumbContainerComponent";
    PageParts["toolbar"] = "PageToolbarContainerComponent";
})(PageParts || (PageParts = {}));
class PageTitleContainerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageTitleContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: PageTitleContainerComponent, isStandalone: false, selector: "abp-page-title-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageTitleContainerComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: false,
                    selector: 'abp-page-title-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });
class PageBreadcrumbContainerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageBreadcrumbContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: PageBreadcrumbContainerComponent, isStandalone: false, selector: "abp-page-breadcrumb-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageBreadcrumbContainerComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: false,
                    selector: 'abp-page-breadcrumb-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });
class PageToolbarContainerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageToolbarContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: PageToolbarContainerComponent, isStandalone: false, selector: "abp-page-toolbar-container", ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageToolbarContainerComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: false,
                    selector: 'abp-page-toolbar-container',
                    template: ` <ng-content></ng-content> `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

class PageComponent {
    constructor() {
        this.toolbarVisible = false;
        this.breadcrumb = true;
        this.pageParts = {
            title: PageParts.title,
            breadcrumb: PageParts.breadcrumb,
            toolbar: PageParts.toolbar,
        };
    }
    set toolbar(val) {
        this._toolbarData = val;
        this.toolbarVisible = true;
    }
    get toolbarData() {
        return this._toolbarData;
    }
    get shouldRenderRow() {
        return !!(this.title ||
            this.toolbarVisible ||
            this.breadcrumb ||
            this.customTitle ||
            this.customBreadcrumb ||
            this.customToolbar ||
            this.pageParts);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: PageComponent, isStandalone: false, selector: "abp-page", inputs: { title: "title", toolbar: "toolbar", breadcrumb: "breadcrumb" }, queries: [{ propertyName: "customTitle", first: true, predicate: PageTitleContainerComponent, descendants: true }, { propertyName: "customBreadcrumb", first: true, predicate: PageBreadcrumbContainerComponent, descendants: true }, { propertyName: "customToolbar", first: true, predicate: PageToolbarContainerComponent, descendants: true }], ngImport: i0, template: "@if (shouldRenderRow) {\r\n  <div class=\"row entry-row\">\r\n    @if (customTitle) {\r\n      <ng-content select=\"abp-page-title-container\"></ng-content>\r\n    } @else {\r\n      @if (title) {\r\n        <div class=\"col-auto\" *abpPagePart=\"pageParts.title\">\r\n          <h1 class=\"content-header-title\">\r\n            {{ title }}\r\n          </h1>\r\n        </div>\r\n      }\r\n    }\r\n\r\n    @if (customBreadcrumb) {\r\n      <ng-content select=\"abp-page-breadcrumb-container\"></ng-content>\r\n    } @else {\r\n      @if (breadcrumb) {\r\n        <div class=\"col-lg-auto ps-lg-0\" *abpPagePart=\"pageParts.breadcrumb\">\r\n          <abp-breadcrumb></abp-breadcrumb>\r\n        </div>\r\n      }\r\n    }\r\n\r\n    @if (customToolbar) {\r\n      <ng-content select=\"abp-page-toolbar-container\"></ng-content>\r\n    } @else {\r\n      @if (toolbarVisible) {\r\n        <div class=\"col\" *abpPagePart=\"pageParts.toolbar; context: toolbarData\">\r\n          <abp-page-toolbar [record]=\"toolbarData\"></abp-page-toolbar>\r\n        </div>\r\n      }\r\n    }\r\n  </div>\r\n}\r\n\r\n<ng-content></ng-content>\r\n", dependencies: [{ kind: "component", type: i1.BreadcrumbComponent, selector: "abp-breadcrumb" }, { kind: "component", type: i2.PageToolbarComponent, selector: "abp-page-toolbar", exportAs: ["abpPageToolbar"] }, { kind: "directive", type: PagePartDirective, selector: "[abpPagePart]", inputs: ["abpPagePartContext", "abpPagePart"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-page', encapsulation: ViewEncapsulation.None, template: "@if (shouldRenderRow) {\r\n  <div class=\"row entry-row\">\r\n    @if (customTitle) {\r\n      <ng-content select=\"abp-page-title-container\"></ng-content>\r\n    } @else {\r\n      @if (title) {\r\n        <div class=\"col-auto\" *abpPagePart=\"pageParts.title\">\r\n          <h1 class=\"content-header-title\">\r\n            {{ title }}\r\n          </h1>\r\n        </div>\r\n      }\r\n    }\r\n\r\n    @if (customBreadcrumb) {\r\n      <ng-content select=\"abp-page-breadcrumb-container\"></ng-content>\r\n    } @else {\r\n      @if (breadcrumb) {\r\n        <div class=\"col-lg-auto ps-lg-0\" *abpPagePart=\"pageParts.breadcrumb\">\r\n          <abp-breadcrumb></abp-breadcrumb>\r\n        </div>\r\n      }\r\n    }\r\n\r\n    @if (customToolbar) {\r\n      <ng-content select=\"abp-page-toolbar-container\"></ng-content>\r\n    } @else {\r\n      @if (toolbarVisible) {\r\n        <div class=\"col\" *abpPagePart=\"pageParts.toolbar; context: toolbarData\">\r\n          <abp-page-toolbar [record]=\"toolbarData\"></abp-page-toolbar>\r\n        </div>\r\n      }\r\n    }\r\n  </div>\r\n}\r\n\r\n<ng-content></ng-content>\r\n" }]
        }], propDecorators: { title: [{
                type: Input
            }], toolbar: [{
                type: Input
            }], breadcrumb: [{
                type: Input
            }], customTitle: [{
                type: ContentChild,
                args: [PageTitleContainerComponent]
            }], customBreadcrumb: [{
                type: ContentChild,
                args: [PageBreadcrumbContainerComponent]
            }], customToolbar: [{
                type: ContentChild,
                args: [PageToolbarContainerComponent]
            }] } });

const exportedDeclarations = [
    PageComponent,
    PageTitleContainerComponent,
    PageBreadcrumbContainerComponent,
    PageToolbarContainerComponent,
    PagePartDirective,
];
class PageModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: PageModule, declarations: [PageComponent,
            PageTitleContainerComponent,
            PageBreadcrumbContainerComponent,
            PageToolbarContainerComponent,
            PagePartDirective], imports: [CoreModule, ThemeSharedModule, PageToolbarComponent], exports: [PageComponent,
            PageTitleContainerComponent,
            PageBreadcrumbContainerComponent,
            PageToolbarContainerComponent,
            PagePartDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageModule, imports: [CoreModule, ThemeSharedModule, PageToolbarComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: PageModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...exportedDeclarations],
                    imports: [CoreModule, ThemeSharedModule, PageToolbarComponent],
                    exports: [...exportedDeclarations],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PAGE_RENDER_STRATEGY, PageBreadcrumbContainerComponent, PageComponent, PageModule, PagePartDirective, PageParts, PageTitleContainerComponent, PageToolbarContainerComponent };
//# sourceMappingURL=abp-ng.components-page.mjs.map
