import { ABP, TrackByService } from '@abp/ng.core';
import { AfterViewInit, ChangeDetectorRef, Injector, OnChanges, SimpleChanges } from '@angular/core';
import { ValidatorFn } from '@angular/forms';
import { Observable } from 'rxjs';
import { FormProp } from '../../models/form-props';
import { PropData } from '../../models/props';
import { eExtensibleComponents } from '../../enums/components';
import { ExtensibleFormPropService } from '../../services/extensible-form-prop.service';
import * as i0 from "@angular/core";
export declare class ExtensibleFormPropComponent implements OnChanges, AfterViewInit {
    #private;
    protected service: ExtensibleFormPropService;
    readonly cdRef: ChangeDetectorRef;
    readonly track: TrackByService<any>;
    private injector;
    private readonly form;
    data: PropData;
    prop: FormProp;
    first?: boolean;
    isFirstGroup?: boolean;
    private fieldRef;
    injectorForCustomComponent?: Injector;
    asterisk: string;
    containerClassName: string;
    showPassword: boolean;
    options$: Observable<ABP.Option<any>[]>;
    validators: ValidatorFn[];
    readonly: boolean;
    typeaheadModel: any;
    passwordKey: eExtensibleComponents;
    disabledFn: (data: PropData) => boolean;
    get disabled(): boolean;
    setTypeaheadValue(selectedOption: ABP.Option<string>): void;
    search: (text$: Observable<string>) => Observable<any[]>;
    typeaheadFormatter: (option: ABP.Option<any>) => string;
    meridian$: Observable<boolean>;
    get isInvalid(): boolean;
    private getTypeaheadControls;
    private setAsterisk;
    ngAfterViewInit(): void;
    getComponent(prop: FormProp): string;
    getType(prop: FormProp): string;
    ngOnChanges({ prop, data }: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExtensibleFormPropComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExtensibleFormPropComponent, "abp-extensible-form-prop", never, { "data": { "alias": "data"; "required": false; }; "prop": { "alias": "prop"; "required": false; }; "first": { "alias": "first"; "required": false; }; "isFirstGroup": { "alias": "isFirstGroup"; "required": false; }; }, {}, never, never, true, never>;
}
