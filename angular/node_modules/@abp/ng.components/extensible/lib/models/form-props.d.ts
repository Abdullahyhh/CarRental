import { ABP } from '@abp/ng.core';
import { Injector, Type } from '@angular/core';
import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';
import { Observable } from 'rxjs';
import { Prop, PropCallback, PropContributorCallback, PropContributorCallbacks, PropData, PropDisplayTextResolver, PropList, PropPredicate, Props, PropsFactory } from './props';
import { FilteredWithOptions, PartialWithOptions } from '../utils/model.utils';
export declare class FormPropList<R = any> extends PropList<R, FormProp<R>> {
}
export declare class FormProps<R = any> extends Props<PropList<R, FormProp<R>>> {
    protected _ctor: Type<FormPropList<R>>;
}
export interface FormPropGroup {
    name: string;
    className?: string;
}
export interface FormPropTooltip {
    text: string;
    placement?: 'top' | 'end' | 'bottom' | 'start';
}
export declare class GroupedFormPropList<R = any> {
    readonly items: GroupedFormPropItem[];
    count: number;
    addItem(item: FormProp<R>): void;
}
export interface GroupedFormPropItem {
    group?: FormPropGroup;
    formPropList: FormPropList;
}
export declare class CreateFormPropsFactory<R = any> extends PropsFactory<FormProps<R>> {
    protected _ctor: Type<FormProps<R>>;
}
export declare class EditFormPropsFactory<R = any> extends PropsFactory<FormProps<R>> {
    protected _ctor: Type<FormProps<R>>;
}
export declare class FormProp<R = any> extends Prop<R> {
    readonly validators: PropCallback<R, ValidatorFn[]>;
    readonly asyncValidators: PropCallback<R, AsyncValidatorFn[]>;
    readonly disabled: PropPredicate<R>;
    readonly readonly: PropPredicate<R>;
    readonly autocomplete: string;
    readonly defaultValue: boolean | number | string | Date | Array<string>;
    readonly options: PropCallback<R, Observable<ABP.Option<any>[]>> | undefined;
    readonly id: string | undefined;
    readonly template?: Type<any>;
    readonly className?: string;
    readonly group?: FormPropGroup | undefined;
    readonly displayTextResolver?: PropDisplayTextResolver<R>;
    readonly formText?: string;
    readonly tooltip?: FormPropTooltip;
    constructor(options: FormPropOptions<R>);
    static create<R = any>(options: FormPropOptions<R>): FormProp<R>;
    static createMany<R = any>(arrayOfOptions: FormPropOptions<R>[]): FormProp<R>[];
}
export declare class FormPropData<R = any> extends PropData<R> {
    readonly record: R;
    getInjected: PropData<R>['getInjected'];
    constructor(injector: Injector, record: R);
}
type OptionalKeys = 'permission' | 'visible' | 'displayName' | 'isExtra' | 'validators' | 'asyncValidators' | 'disabled' | 'readonly' | 'autocomplete' | 'defaultValue' | 'options' | 'id' | 'displayTextResolver' | 'formText' | 'tooltip';
export type FormPropOptions<R = any> = PartialWithOptions<FormProp<R>, OptionalKeys> & FilteredWithOptions<FormProp<R>, OptionalKeys>;
export type CreateFormPropDefaults<R = any> = Record<string, FormProp<R>[]>;
export type CreateFormPropContributorCallback<R = any> = PropContributorCallback<FormPropList<R>>;
export type CreateFormPropContributorCallbacks<R = any> = PropContributorCallbacks<FormPropList<R>>;
export type EditFormPropDefaults<R = any> = Record<string, FormProp<R>[]>;
export type EditFormPropContributorCallback<R = any> = PropContributorCallback<FormPropList<R>>;
export type EditFormPropContributorCallbacks<R = any> = PropContributorCallbacks<FormPropList<R>>;
export {};
