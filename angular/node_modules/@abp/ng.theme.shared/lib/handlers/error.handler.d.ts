import { Injector } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HttpErrorReporterService } from '@abp/ng.core';
import { CustomHttpErrorHandlerService } from '../models/common';
import { Confirmation } from '../models/confirmation';
import { ConfirmationService } from '../services/confirmation.service';
import { RouterErrorHandlerService } from '../services/router-error-handler.service';
import * as i0 from "@angular/core";
export declare class ErrorHandler {
    protected injector: Injector;
    protected readonly httpErrorReporter: HttpErrorReporterService;
    protected readonly confirmationService: ConfirmationService;
    protected readonly routerErrorHandlerService: RouterErrorHandlerService;
    protected readonly httpErrorConfig: import("../models/common").HttpErrorConfig;
    protected readonly customErrorHandlers: CustomHttpErrorHandlerService[];
    protected readonly httpErrorHandler: import("../models/common").HttpErrorHandler;
    constructor(injector: Injector);
    protected listenToRouterError(): void;
    protected listenToRestError(): void;
    protected executeErrorHandler: (error: HttpErrorResponse) => Observable<any>;
    protected sortHttpErrorHandlers(a: CustomHttpErrorHandlerService, b: CustomHttpErrorHandlerService): number;
    protected handleError(err: unknown): void;
    protected showError(): Observable<Confirmation.Status>;
    protected filterRestErrors: ({ status }: HttpErrorResponse) => boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ErrorHandler, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ErrorHandler>;
}
