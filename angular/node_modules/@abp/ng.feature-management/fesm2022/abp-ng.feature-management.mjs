import * as i3 from '@abp/ng.core';
import { TrackByService, ConfigStateService, LocalizationModule, ReplaceableTemplateDirective, CoreModule } from '@abp/ng.core';
import { FeaturesService } from '@abp/ng.feature-management/proxy';
import * as i2 from '@abp/ng.theme.shared';
import { ToasterService, ConfirmationService, Confirmation, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i0 from '@angular/core';
import { HostBinding, Input, Directive, inject, EventEmitter, Output, Component, provideAppInitializer, makeEnvironmentProviders, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule, NgTemplateOutlet } from '@angular/common';
import * as i4 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i5 from '@ng-bootstrap/ng-bootstrap';
import { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';
import { finalize } from 'rxjs/operators';
import { SettingTabsService } from '@abp/ng.setting-management/config';

const INPUT_TYPES = {
    numeric: 'number',
    default: 'text',
};
class FreeTextInputDirective {
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set feature(val) {
        this._feature = val;
        this.setInputType();
    }
    get feature() {
        return this._feature;
    }
    setInputType() {
        const validatorType = this.feature?.valueType?.validator?.name.toLowerCase();
        this.type = INPUT_TYPES[validatorType] ?? INPUT_TYPES.default;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FreeTextInputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.1.8", type: FreeTextInputDirective, isStandalone: true, selector: "input[abpFeatureManagementFreeText]", inputs: { feature: ["abpFeatureManagementFreeText", "feature"] }, host: { properties: { "type": "this.type" } }, exportAs: ["inputAbpFeatureManagementFreeText"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FreeTextInputDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[abpFeatureManagementFreeText]',
                    exportAs: 'inputAbpFeatureManagementFreeText',
                }]
        }], propDecorators: { feature: [{
                type: Input,
                args: ['abpFeatureManagementFreeText']
            }], type: [{
                type: HostBinding,
                args: ['type']
            }] } });

var ValueTypes;
(function (ValueTypes) {
    ValueTypes["ToggleStringValueType"] = "ToggleStringValueType";
    ValueTypes["FreeTextStringValueType"] = "FreeTextStringValueType";
    ValueTypes["SelectionStringValueType"] = "SelectionStringValueType";
})(ValueTypes || (ValueTypes = {}));
class FeatureManagementComponent {
    constructor() {
        this.track = inject(TrackByService);
        this.toasterService = inject(ToasterService);
        this.service = inject(FeaturesService);
        this.configState = inject(ConfigStateService);
        this.confirmationService = inject(ConfirmationService);
        this.groups = [];
        this.valueTypes = ValueTypes;
        this.visibleChange = new EventEmitter();
        this.modalBusy = false;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        if (this._visible === value) {
            return;
        }
        this._visible = value;
        this.visibleChange.emit(value);
        if (value) {
            this.openModal();
            return;
        }
    }
    openModal() {
        if (!this.providerName) {
            throw new Error('providerName is required.');
        }
        this.getFeatures();
    }
    getFeatures() {
        this.service.get(this.providerName, this.providerKey).subscribe(res => {
            if (!res.groups?.length)
                return;
            this.groups = res.groups.map(({ name, displayName }) => ({ name, displayName }));
            this.selectedGroupDisplayName = this.groups[0].displayName;
            this.features = res.groups.reduce((acc, val) => ({
                ...acc,
                [val.name]: mapFeatures(val.features, document.body.dir),
            }), {});
        });
    }
    save() {
        if (this.modalBusy)
            return;
        const changedFeatures = [];
        Object.keys(this.features).forEach(key => {
            this.features[key].forEach(feature => {
                if (feature.value !== feature.initialValue)
                    changedFeatures.push({ name: feature.name, value: `${feature.value}` });
            });
        });
        if (!changedFeatures.length) {
            this.visible = false;
            return;
        }
        this.modalBusy = true;
        this.service
            .update(this.providerName, this.providerKey, { features: changedFeatures })
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.visible = false;
            this.toasterService.success('AbpUi::SavedSuccessfully');
            if (!this.providerKey) {
                // to refresh host's features
                this.configState.refreshAppState().subscribe();
            }
        });
    }
    resetToDefault() {
        this.confirmationService
            .warn('AbpFeatureManagement::AreYouSureToResetToDefault', 'AbpFeatureManagement::AreYouSure')
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.service.delete(this.providerName, this.providerKey).subscribe(() => {
                    this.toasterService.success('AbpFeatureManagement::ResetedToDefault');
                    this.visible = false;
                    if (!this.providerKey) {
                        // to refresh host's features
                        this.configState.refreshAppState().subscribe();
                    }
                });
            }
        });
    }
    onCheckboxClick(val, feature) {
        if (val) {
            this.checkToggleAncestors(feature);
        }
        else {
            this.uncheckToggleDescendants(feature);
        }
    }
    uncheckToggleDescendants(feature) {
        this.findAllDescendantsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, false));
    }
    checkToggleAncestors(feature) {
        this.findAllAncestorsOfByType(feature, ValueTypes.ToggleStringValueType).forEach(node => this.setFeatureValue(node, true));
    }
    findAllAncestorsOfByType(feature, type) {
        let parent = this.findParentByType(feature, type);
        const ancestors = [];
        while (parent) {
            ancestors.push(parent);
            parent = this.findParentByType(parent, type);
        }
        return ancestors;
    }
    findAllDescendantsOfByType(feature, type) {
        const descendants = [];
        const queue = [feature];
        while (queue.length) {
            const node = queue.pop();
            const newDescendants = this.findChildrenByType(node, type);
            descendants.push(...newDescendants);
            queue.push(...newDescendants);
        }
        return descendants;
    }
    findParentByType(feature, type) {
        return this.getCurrentGroup().find(f => f.valueType.name === type && f.name === feature.parentName);
    }
    findChildrenByType(feature, type) {
        return this.getCurrentGroup().filter(f => f.valueType.name === type && f.parentName === feature.name);
    }
    getCurrentGroup() {
        return this.features[this.selectedGroupDisplayName] ?? [];
    }
    setFeatureValue(feature, val) {
        feature.value = val;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: FeatureManagementComponent, isStandalone: true, selector: "abp-feature-management", inputs: { providerKey: "providerKey", providerName: "providerName", providerTitle: "providerTitle", visible: "visible" }, outputs: { visibleChange: "visibleChange" }, exportAs: ["abpFeatureManagement"], ngImport: i0, template: "@if (visible) {\r\n  <abp-modal [(visible)]=\"visible\" [busy]=\"modalBusy\" [options]=\"{ size: 'lg' }\">\r\n    <ng-template #abpHeader>\r\n      <h3>\r\n        {{ 'AbpFeatureManagement::Features' | abpLocalization }}\r\n        @if (providerTitle) {\r\n          - {{ providerTitle }}\r\n        }\r\n      </h3>\r\n    </ng-template>\r\n\r\n    <ng-template #abpBody>\r\n      <div class=\"row\">\r\n        @if (groups.length) {\r\n          <div class=\"col-md-4\">\r\n            <ul\r\n              ngbNav\r\n              #nav=\"ngbNav\"\r\n              [(activeId)]=\"selectedGroupDisplayName\"\r\n              class=\"nav-pills\"\r\n              orientation=\"vertical\"\r\n            >\r\n              @for (group of groups; track group.name) {\r\n                <li [ngbNavItem]=\"group.displayName\">\r\n                  <a ngbNavLink>{{ group.displayName }}</a>\r\n                  <ng-template ngbNavContent>\r\n                    <h4>{{ selectedGroupDisplayName }}</h4>\r\n                    <hr class=\"mt-2 mb-3\" />\r\n\r\n                    @for (feature of features[group.name]; track feature.id || i; let i = $index) {\r\n                      <div class=\"mt-2\" [ngStyle]=\"feature.style\" (keyup.enter)=\"save()\">\r\n                        @switch (feature.valueType?.name) {\r\n                          @case (valueTypes.ToggleStringValueType) {\r\n                            <div class=\"form-check\" [class.px-4]=\"!!feature.parentName\">\r\n                              <input\r\n                                class=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                [id]=\"feature.name\"\r\n                                [(ngModel)]=\"feature.value\"\r\n                                (ngModelChange)=\"onCheckboxClick($event, feature)\"\r\n                              />\r\n\r\n                              <label class=\"form-check-label\" [htmlFor]=\"feature.name\">{{\r\n                                feature.displayName\r\n                              }}</label>\r\n                              <ng-container\r\n                                *ngTemplateOutlet=\"\r\n                                  descTmp;\r\n                                  context: { $implicit: feature.description }\r\n                                \"\r\n                              ></ng-container>\r\n                            </div>\r\n                          }\r\n                          @case (valueTypes.FreeTextStringValueType) {\r\n                            <div class=\"mb-3 form-group\" [class.px-2]=\"!!feature.parentName\">\r\n                              <label [htmlFor]=\"feature.name\" class=\"form-label\">{{\r\n                                feature.displayName\r\n                              }}</label>\r\n                              <input\r\n                                class=\"form-control\"\r\n                                type=\"text\"\r\n                                [id]=\"feature.name\"\r\n                                [(ngModel)]=\"feature.value\"\r\n                                [abpFeatureManagementFreeText]=\"feature\"\r\n                              />\r\n\r\n                              <ng-container\r\n                                *ngTemplateOutlet=\"\r\n                                  descTmp;\r\n                                  context: { $implicit: feature.description }\r\n                                \"\r\n                              ></ng-container>\r\n                            </div>\r\n                          }\r\n                          @case (valueTypes.SelectionStringValueType) {\r\n                            @if (feature.valueType.itemSource?.items?.length) {\r\n                              <div class=\"mb-3 form-group\" [class.px-2]=\"!!feature.parentName\">\r\n                                <label [htmlFor]=\"feature.name\" class=\"form-label\">{{\r\n                                  feature.displayName\r\n                                }}</label>\r\n                                <select\r\n                                  class=\"form-select\"\r\n                                  [id]=\"feature.name\"\r\n                                  [(ngModel)]=\"feature.value\"\r\n                                >\r\n                                  @for (\r\n                                    item of feature.valueType.itemSource?.items;\r\n                                    track item.value\r\n                                  ) {\r\n                                    <option [ngValue]=\"item.value\">\r\n                                      {{\r\n                                        item.displayText?.resourceName +\r\n                                          '::' +\r\n                                          item.displayText?.name | abpLocalization\r\n                                      }}\r\n                                    </option>\r\n                                  }\r\n                                </select>\r\n                                <ng-container\r\n                                  *ngTemplateOutlet=\"\r\n                                    descTmp;\r\n                                    context: { $implicit: feature.description }\r\n                                  \"\r\n                                ></ng-container>\r\n                              </div>\r\n                            }\r\n                          }\r\n                          @default {\r\n                            {{ feature.displayName }}\r\n                          }\r\n                        }\r\n                      </div>\r\n                    }\r\n                  </ng-template>\r\n                </li>\r\n              }\r\n            </ul>\r\n          </div>\r\n\r\n          <ng-template #descTmp let-description>\r\n            @if (description) {\r\n              <small class=\"d-block form-text text-muted\">{{ description }}</small>\r\n            }\r\n          </ng-template>\r\n\r\n          <div class=\"col-md-8\"><div class=\"py-0\" [ngbNavOutlet]=\"nav\"></div></div>\r\n        }\r\n\r\n        @if (!groups.length) {\r\n          <div class=\"col\">\r\n            {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\r\n          </div>\r\n        }\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-link\">\r\n        {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n\r\n      @if (groups.length) {\r\n        <abp-button\r\n          buttonClass=\"btn btn-outline-primary\"\r\n          [disabled]=\"modalBusy\"\r\n          (click)=\"resetToDefault()\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          {{ 'AbpFeatureManagement::ResetToDefault' | abpLocalization }}\r\n        </abp-button>\r\n      }\r\n\r\n      @if (groups.length) {\r\n        <abp-button\r\n          iconClass=\"fa fa-check\"\r\n          [disabled]=\"modalBusy\"\r\n          (click)=\"save()\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          {{ 'AbpFeatureManagement::Save' | abpLocalization }}\r\n        </abp-button>\r\n      }\r\n    </ng-template>\r\n  </abp-modal>\r\n}\r\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: ThemeSharedModule }, { kind: "component", type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i2.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i2.ModalCloseDirective, selector: "[abpClose]" }, { kind: "ngmodule", type: LocalizationModule }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: NgbNavModule }, { kind: "directive", type: i5.NgbNavContent, selector: "ng-template[ngbNavContent]" }, { kind: "directive", type: i5.NgbNav, selector: "[ngbNav]", inputs: ["activeId", "animation", "destroyOnHide", "orientation", "roles", "keyboard"], outputs: ["activeIdChange", "shown", "hidden", "navChange"], exportAs: ["ngbNav"] }, { kind: "directive", type: i5.NgbNavItem, selector: "[ngbNavItem]", inputs: ["destroyOnHide", "disabled", "domId", "ngbNavItem"], outputs: ["shown", "hidden"], exportAs: ["ngbNavItem"] }, { kind: "directive", type: i5.NgbNavItemRole, selector: "[ngbNavItem]:not(ng-container)" }, { kind: "directive", type: i5.NgbNavLink, selector: "a[ngbNavLink]" }, { kind: "directive", type: i5.NgbNavLinkBase, selector: "[ngbNavLink]" }, { kind: "component", type: i5.NgbNavOutlet, selector: "[ngbNavOutlet]", inputs: ["paneRole", "ngbNavOutlet"] }, { kind: "directive", type: FreeTextInputDirective, selector: "input[abpFeatureManagementFreeText]", inputs: ["abpFeatureManagementFreeText"], exportAs: ["inputAbpFeatureManagementFreeText"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-feature-management', exportAs: 'abpFeatureManagement', imports: [
                        CommonModule,
                        ThemeSharedModule,
                        LocalizationModule,
                        FormsModule,
                        NgbNavModule,
                        FreeTextInputDirective,
                        NgTemplateOutlet,
                    ], template: "@if (visible) {\r\n  <abp-modal [(visible)]=\"visible\" [busy]=\"modalBusy\" [options]=\"{ size: 'lg' }\">\r\n    <ng-template #abpHeader>\r\n      <h3>\r\n        {{ 'AbpFeatureManagement::Features' | abpLocalization }}\r\n        @if (providerTitle) {\r\n          - {{ providerTitle }}\r\n        }\r\n      </h3>\r\n    </ng-template>\r\n\r\n    <ng-template #abpBody>\r\n      <div class=\"row\">\r\n        @if (groups.length) {\r\n          <div class=\"col-md-4\">\r\n            <ul\r\n              ngbNav\r\n              #nav=\"ngbNav\"\r\n              [(activeId)]=\"selectedGroupDisplayName\"\r\n              class=\"nav-pills\"\r\n              orientation=\"vertical\"\r\n            >\r\n              @for (group of groups; track group.name) {\r\n                <li [ngbNavItem]=\"group.displayName\">\r\n                  <a ngbNavLink>{{ group.displayName }}</a>\r\n                  <ng-template ngbNavContent>\r\n                    <h4>{{ selectedGroupDisplayName }}</h4>\r\n                    <hr class=\"mt-2 mb-3\" />\r\n\r\n                    @for (feature of features[group.name]; track feature.id || i; let i = $index) {\r\n                      <div class=\"mt-2\" [ngStyle]=\"feature.style\" (keyup.enter)=\"save()\">\r\n                        @switch (feature.valueType?.name) {\r\n                          @case (valueTypes.ToggleStringValueType) {\r\n                            <div class=\"form-check\" [class.px-4]=\"!!feature.parentName\">\r\n                              <input\r\n                                class=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                [id]=\"feature.name\"\r\n                                [(ngModel)]=\"feature.value\"\r\n                                (ngModelChange)=\"onCheckboxClick($event, feature)\"\r\n                              />\r\n\r\n                              <label class=\"form-check-label\" [htmlFor]=\"feature.name\">{{\r\n                                feature.displayName\r\n                              }}</label>\r\n                              <ng-container\r\n                                *ngTemplateOutlet=\"\r\n                                  descTmp;\r\n                                  context: { $implicit: feature.description }\r\n                                \"\r\n                              ></ng-container>\r\n                            </div>\r\n                          }\r\n                          @case (valueTypes.FreeTextStringValueType) {\r\n                            <div class=\"mb-3 form-group\" [class.px-2]=\"!!feature.parentName\">\r\n                              <label [htmlFor]=\"feature.name\" class=\"form-label\">{{\r\n                                feature.displayName\r\n                              }}</label>\r\n                              <input\r\n                                class=\"form-control\"\r\n                                type=\"text\"\r\n                                [id]=\"feature.name\"\r\n                                [(ngModel)]=\"feature.value\"\r\n                                [abpFeatureManagementFreeText]=\"feature\"\r\n                              />\r\n\r\n                              <ng-container\r\n                                *ngTemplateOutlet=\"\r\n                                  descTmp;\r\n                                  context: { $implicit: feature.description }\r\n                                \"\r\n                              ></ng-container>\r\n                            </div>\r\n                          }\r\n                          @case (valueTypes.SelectionStringValueType) {\r\n                            @if (feature.valueType.itemSource?.items?.length) {\r\n                              <div class=\"mb-3 form-group\" [class.px-2]=\"!!feature.parentName\">\r\n                                <label [htmlFor]=\"feature.name\" class=\"form-label\">{{\r\n                                  feature.displayName\r\n                                }}</label>\r\n                                <select\r\n                                  class=\"form-select\"\r\n                                  [id]=\"feature.name\"\r\n                                  [(ngModel)]=\"feature.value\"\r\n                                >\r\n                                  @for (\r\n                                    item of feature.valueType.itemSource?.items;\r\n                                    track item.value\r\n                                  ) {\r\n                                    <option [ngValue]=\"item.value\">\r\n                                      {{\r\n                                        item.displayText?.resourceName +\r\n                                          '::' +\r\n                                          item.displayText?.name | abpLocalization\r\n                                      }}\r\n                                    </option>\r\n                                  }\r\n                                </select>\r\n                                <ng-container\r\n                                  *ngTemplateOutlet=\"\r\n                                    descTmp;\r\n                                    context: { $implicit: feature.description }\r\n                                  \"\r\n                                ></ng-container>\r\n                              </div>\r\n                            }\r\n                          }\r\n                          @default {\r\n                            {{ feature.displayName }}\r\n                          }\r\n                        }\r\n                      </div>\r\n                    }\r\n                  </ng-template>\r\n                </li>\r\n              }\r\n            </ul>\r\n          </div>\r\n\r\n          <ng-template #descTmp let-description>\r\n            @if (description) {\r\n              <small class=\"d-block form-text text-muted\">{{ description }}</small>\r\n            }\r\n          </ng-template>\r\n\r\n          <div class=\"col-md-8\"><div class=\"py-0\" [ngbNavOutlet]=\"nav\"></div></div>\r\n        }\r\n\r\n        @if (!groups.length) {\r\n          <div class=\"col\">\r\n            {{ 'AbpFeatureManagement::NoFeatureFoundMessage' | abpLocalization }}\r\n          </div>\r\n        }\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-link\">\r\n        {{ 'AbpFeatureManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n\r\n      @if (groups.length) {\r\n        <abp-button\r\n          buttonClass=\"btn btn-outline-primary\"\r\n          [disabled]=\"modalBusy\"\r\n          (click)=\"resetToDefault()\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          {{ 'AbpFeatureManagement::ResetToDefault' | abpLocalization }}\r\n        </abp-button>\r\n      }\r\n\r\n      @if (groups.length) {\r\n        <abp-button\r\n          iconClass=\"fa fa-check\"\r\n          [disabled]=\"modalBusy\"\r\n          (click)=\"save()\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          {{ 'AbpFeatureManagement::Save' | abpLocalization }}\r\n        </abp-button>\r\n      }\r\n    </ng-template>\r\n  </abp-modal>\r\n}\r\n" }]
        }], propDecorators: { providerKey: [{
                type: Input
            }], providerName: [{
                type: Input
            }], providerTitle: [{
                type: Input,
                args: [{ required: false }]
            }], visible: [{
                type: Input
            }], visibleChange: [{
                type: Output
            }] } });
function mapFeatures(features, dir) {
    const margin = `margin-${dir === 'rtl' ? 'right' : 'left'}.px`;
    return features.map(feature => {
        const value = feature.valueType?.name === ValueTypes.ToggleStringValueType
            ? (feature.value || '').toLowerCase() === 'true'
            : feature.value;
        return {
            ...feature,
            value,
            initialValue: value,
            style: { [margin]: feature.depth * 20 },
        };
    });
}

class FeatureManagementTabComponent {
    constructor() {
        this.visibleFeatures = false;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    openFeaturesModal() {
        this.visibleFeatures = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementTabComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: FeatureManagementTabComponent, isStandalone: true, selector: "abp-feature-management-tab", ngImport: i0, template: "<p class=\"pt-2 text-wrap\">{{ 'AbpFeatureManagement::ManageHostFeaturesText' | abpLocalization }}</p>\r\n\r\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"openFeaturesModal()\">\r\n  <i class=\"me-1 fa fa-cog\" aria-hidden=\"true\"></i>\r\n  {{ 'AbpFeatureManagement::ManageHostFeatures' | abpLocalization }}\r\n</button>\r\n@if (visibleFeatures) {\r\n  <abp-feature-management\r\n    *abpReplaceableTemplate=\"{\r\n      inputs: {\r\n        providerName: { value: 'T' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visibleFeatures, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisibleFeaturesChange },\r\n      componentKey: 'FeatureManagement.FeatureManagementComponent'\r\n    }\"\r\n    [(visible)]=\"visibleFeatures\"\r\n    providerName=\"T\"\r\n    [providerKey]=\"providerKey\"\r\n  >\r\n  </abp-feature-management>\r\n}\r\n", dependencies: [{ kind: "directive", type: ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "ngmodule", type: LocalizationModule }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }, { kind: "component", type: FeatureManagementComponent, selector: "abp-feature-management", inputs: ["providerKey", "providerName", "providerTitle", "visible"], outputs: ["visibleChange"], exportAs: ["abpFeatureManagement"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementTabComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-feature-management-tab', imports: [ReplaceableTemplateDirective, LocalizationModule, FeatureManagementComponent], template: "<p class=\"pt-2 text-wrap\">{{ 'AbpFeatureManagement::ManageHostFeaturesText' | abpLocalization }}</p>\r\n\r\n<button class=\"btn btn-primary\" type=\"button\" (click)=\"openFeaturesModal()\">\r\n  <i class=\"me-1 fa fa-cog\" aria-hidden=\"true\"></i>\r\n  {{ 'AbpFeatureManagement::ManageHostFeatures' | abpLocalization }}\r\n</button>\r\n@if (visibleFeatures) {\r\n  <abp-feature-management\r\n    *abpReplaceableTemplate=\"{\r\n      inputs: {\r\n        providerName: { value: 'T' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visibleFeatures, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisibleFeaturesChange },\r\n      componentKey: 'FeatureManagement.FeatureManagementComponent'\r\n    }\"\r\n    [(visible)]=\"visibleFeatures\"\r\n    providerName=\"T\"\r\n    [providerKey]=\"providerKey\"\r\n  >\r\n  </abp-feature-management>\r\n}\r\n" }]
        }] });

const FEATURE_MANAGEMENT_SETTINGS_PROVIDERS = [
    provideAppInitializer(() => {
        configureSettingTabs();
    }),
];
function configureSettingTabs() {
    const settingtabs = inject(SettingTabsService);
    settingtabs.add([
        {
            name: "AbpFeatureManagement::Permission:FeatureManagement" /* eFeatureManagementTabNames.FeatureManagement */,
            order: 100,
            requiredPolicy: 'FeatureManagement.ManageHostFeatures',
            component: FeatureManagementTabComponent,
        },
    ]);
}

function provideFeatureManagementConfig() {
    return makeEnvironmentProviders([FEATURE_MANAGEMENT_SETTINGS_PROVIDERS]);
}

const exported = [
    FeatureManagementComponent,
    FreeTextInputDirective,
    FeatureManagementTabComponent,
];
/**
 * @deprecated FeatureManagementModule is deprecated .
 * @description use `provideFeatureManagementConfig` *function* for config settings.
 * You can import directives and pipes directly whichs were belongs to FeatureManagementModule are switched to standalone.
 */
class FeatureManagementModule {
    static forRoot() {
        return {
            ngModule: FeatureManagementModule,
            providers: [provideFeatureManagementConfig()],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementModule, imports: [CoreModule, ThemeSharedModule, NgbNavModule, FeatureManagementComponent,
            FreeTextInputDirective,
            FeatureManagementTabComponent], exports: [FeatureManagementComponent,
            FreeTextInputDirective,
            FeatureManagementTabComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementModule, imports: [CoreModule, ThemeSharedModule, NgbNavModule, FeatureManagementComponent,
            FeatureManagementTabComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: FeatureManagementModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CoreModule, ThemeSharedModule, NgbNavModule, ...exported],
                    exports: [...exported],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FEATURE_MANAGEMENT_SETTINGS_PROVIDERS, FeatureManagementComponent, FeatureManagementModule, FeatureManagementTabComponent, FreeTextInputDirective, INPUT_TYPES, configureSettingTabs, provideFeatureManagementConfig };
//# sourceMappingURL=abp-ng.feature-management.mjs.map
