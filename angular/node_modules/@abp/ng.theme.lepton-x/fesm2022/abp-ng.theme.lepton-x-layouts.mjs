import * as i0 from '@angular/core';
import { Component, provideAppInitializer, inject, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i1$1 from '@abp/ng.core';
import { ReplaceableComponentsService, CoreModule } from '@abp/ng.core';
import * as i2 from '@volo/ngx-lepton-x.lite';
import { UserProfileModule, LanguageSelectionModule } from '@volo/ngx-lepton-x.lite';
import * as i1$2 from '@abp/ng.theme.shared';
import { NavItemsService } from '@abp/ng.theme.shared';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@volo/ngx-lepton-x.core';
import { LpxNavbarModule, PanelsModule, LpxTranslateModule, LpxFooterModule } from '@volo/ngx-lepton-x.core';
import * as i1$3 from '@volo/ngx-lepton-x.lite/layouts';
import { LpxSideMenuLayoutModule } from '@volo/ngx-lepton-x.lite/layouts';
import * as i5 from '@volo/abp.ng.lepton-x.core';
import { LeptonXAbpCoreModule } from '@volo/abp.ng.lepton-x.core';
import { OAuthService } from 'angular-oauth2-oidc';

class EmptyLayoutComponent {
    static { this.type = "empty" /* eLayoutType.empty */; }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: EmptyLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: EmptyLayoutComponent, isStandalone: true, selector: "abp-layout-empty", ngImport: i0, template: ` <router-outlet></router-outlet> `, isInline: true, dependencies: [{ kind: "ngmodule", type: RouterModule }, { kind: "directive", type: i1.RouterOutlet, selector: "router-outlet", inputs: ["name", "routerOutletData"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: EmptyLayoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-layout-empty',
                    imports: [RouterModule],
                    template: ` <router-outlet></router-outlet> `,
                }]
        }] });

class LanguageSelectionComponent {
    constructor() {
        this.languageSelectionKey = "Theme.LanguagesComponent" /* eThemeLeptonXComponents.Languages */;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: LanguageSelectionComponent, isStandalone: false, selector: "abp-language-selection", ngImport: i0, template: "<lpx-language-selection *abpReplaceableTemplate=\"{\r\n        componentKey: languageSelectionKey\r\n      }\">\r\n</lpx-language-selection>\r\n", dependencies: [{ kind: "directive", type: i1$1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "component", type: i2.LanguageSelectionComponent, selector: "lpx-language-selection" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: LanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-language-selection', template: "<lpx-language-selection *abpReplaceableTemplate=\"{\r\n        componentKey: languageSelectionKey\r\n      }\">\r\n</lpx-language-selection>\r\n" }]
        }] });

class NavItemsComponent {
    constructor(navItems) {
        this.navItems = navItems;
        this.trackByFn = (_, element) => element.id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: NavItemsComponent, deps: [{ token: i1$2.NavItemsService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: NavItemsComponent, isStandalone: false, selector: "abp-nav-items", ngImport: i0, template: "@for (item of navItems.items$ | async; track $index) {\r\n  <!-- TODO: muhammaed: use pipe or etc instead of func exec -->\r\n  <ng-container *abpVisible=\"!item.visible || item.visible(item)\">\r\n    <ng-container *abpPermission=\"item.requiredPolicy\">\r\n      @if (item.component) {\r\n        <ng-container [ngComponentOutlet]=\"item.component\"></ng-container>\r\n      } @else {\r\n        <div\r\n          [innerHTML]=\"item.html\"\r\n          (click)=\"item.action ? item.action() : null\"\r\n        ></div>\r\n      }\r\n    </ng-container>\r\n  </ng-container>\r\n}\r\n", styles: [":host{all:inherit}\n"], dependencies: [{ kind: "directive", type: i2$1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"], exportAs: ["ngComponentOutlet"] }, { kind: "directive", type: i1$1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { kind: "pipe", type: i2$1.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: NavItemsComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-nav-items', template: "@for (item of navItems.items$ | async; track $index) {\r\n  <!-- TODO: muhammaed: use pipe or etc instead of func exec -->\r\n  <ng-container *abpVisible=\"!item.visible || item.visible(item)\">\r\n    <ng-container *abpPermission=\"item.requiredPolicy\">\r\n      @if (item.component) {\r\n        <ng-container [ngComponentOutlet]=\"item.component\"></ng-container>\r\n      } @else {\r\n        <div\r\n          [innerHTML]=\"item.html\"\r\n          (click)=\"item.action ? item.action() : null\"\r\n        ></div>\r\n      }\r\n    </ng-container>\r\n  </ng-container>\r\n}\r\n", styles: [":host{all:inherit}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.NavItemsService }] });

class UserProfileComponent {
    constructor() {
        this.key = "Theme.CurrentUserComponent" /* eThemeLeptonXComponents.CurrentUser */;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: UserProfileComponent, isStandalone: false, selector: "abp-user-profile", ngImport: i0, template: "<lpx-user-profile *abpReplaceableTemplate=\"{componentKey:key}\"></lpx-user-profile>\r\n", dependencies: [{ kind: "directive", type: i1$1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "component", type: i2.UserProfileComponent, selector: "lpx-user-profile" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: UserProfileComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-user-profile', template: "<lpx-user-profile *abpReplaceableTemplate=\"{componentKey:key}\"></lpx-user-profile>\r\n" }]
        }] });

class NavigateToLoginComponent {
    constructor(authService) {
        this.authService = authService;
    }
    navigateToLogin(event) {
        event.preventDefault();
        this.authService.navigateToLogin();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: NavigateToLoginComponent, deps: [{ token: i1$1.AuthService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: NavigateToLoginComponent, isStandalone: false, selector: "abp-navigate-to-login", ngImport: i0, template: `
    <a href="#" class="nav-link" (click)="navigateToLogin($event)">
      <span>{{ 'AbpUi::Login' | lpxTranslate | async }}</span>
    </a>
  `, isInline: true, dependencies: [{ kind: "pipe", type: i2$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "lpxTranslate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: NavigateToLoginComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: false,
                    selector: 'abp-navigate-to-login',
                    template: `
    <a href="#" class="nav-link" (click)="navigateToLogin($event)">
      <span>{{ 'AbpUi::Login' | lpxTranslate | async }}</span>
    </a>
  `,
                }]
        }], ctorParameters: () => [{ type: i1$1.AuthService }] });

class SideMenuApplicationLayoutComponent {
    constructor() {
        this.toolbarKey = "Theme.ToolbarComponent" /* eThemeLeptonXComponents.Toolbar */;
        this.navbarKey = "Theme.NavbarComponent" /* eThemeLeptonXComponents.Navbar */;
        this.routesKey = "Theme.RoutesComponent" /* eThemeLeptonXComponents.Routes */;
        this.navItemsKey = "Theme.NavItemsComponent" /* eThemeLeptonXComponents.NavItems */;
        this.breadcrumbKey = "Theme.BreadcrumbComponent" /* eThemeLeptonXComponents.Breadcrumb */;
        this.footerKey = "Theme.FooterComponent" /* eThemeLeptonXComponents.Footer */;
        this.mobileNavbarKey = "Theme.MobileNavbarComponent" /* eThemeLeptonXComponents.MobileNavbar */;
        this.pageAlertContainerKey = "Theme.PageAlertContainerComponent" /* eThemeLeptonXComponents.PageAlertContainer */;
        this.logoKey = "Theme.LogoComponent" /* eThemeLeptonXComponents.Logo */;
        this.currentUserKey = "Theme.CurrentUserComponent" /* eThemeLeptonXComponents.CurrentUser */;
        this.currentUserImageKey = "Theme.CurrentUserImageComponent" /* eThemeLeptonXComponents.CurrentUserImage */;
        this.languageKey = "Theme.LanguagesComponent" /* eThemeLeptonXComponents.Languages */;
        this.mobileUserProfile = "Theme.MobileUserProfileComponent" /* eThemeLeptonXComponents.MobileUserProfile */;
        this.mobileLanguageSelection = "Theme.MobileLanguageSelectionComponent" /* eThemeLeptonXComponents.MobileLanguageSelection */;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuApplicationLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: SideMenuApplicationLayoutComponent, isStandalone: false, selector: "abp-application-layout", ngImport: i0, template: "<lpx-layout #layout>\r\n  <ng-template lpx-navbar-panel>\r\n    <lpx-navbar\r\n      *abpReplaceableTemplate=\"{\r\n        componentKey: navbarKey\r\n      }\"\r\n    >\r\n      <ng-container *abpIfReplaceableTemplateExists=\"logoKey\">\r\n        <ng-template lpx-logo-panel>\r\n          <ng-container *abpReplaceableTemplate=\"{ componentKey: logoKey }\">\r\n          </ng-container>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <ng-template lpx-navbar-routes let-items>\r\n        <lpx-navbar-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: routesKey,\r\n            inputs: {\r\n              navbarItems: items\r\n            }\r\n          }\"\r\n          [navbarItems]=\"items\"\r\n        >\r\n        </lpx-navbar-routes>\r\n      </ng-template>\r\n    </lpx-navbar>\r\n  </ng-template>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"navItemsKey\">\r\n    <ng-template lpx-topbar-content>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: navItemsKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"logoKey\">\r\n    <ng-template lpx-logo-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: logoKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"currentUserKey\">\r\n    <ng-template lpx-user-profile>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: currentUserKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"currentUserImageKey\">\r\n    <ng-template lpx-current-user-image-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: currentUserImageKey }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"languageKey\">\r\n    <ng-template lpx-language-selection>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: languageKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"breadcrumbKey\">\r\n    <ng-template lpx-breadcrumb-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{\r\n          componentKey: breadcrumbKey\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileNavbarKey\">\r\n    <ng-template lpx-mobile-navbar-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: mobileNavbarKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileUserProfile\">\r\n    <ng-template lpx-mn-user-profile-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: mobileUserProfile }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"footerKey\">\r\n    <ng-template lpx-footer-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: footerKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileLanguageSelection\">\r\n    <ng-template lpx-mn-language-selection>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: mobileLanguageSelection }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n  <ng-template lpx-content>\r\n    <abp-page-alert-container\r\n      *abpReplaceableTemplate=\"{ componentKey: pageAlertContainerKey }\"\r\n    ></abp-page-alert-container>\r\n\r\n    <router-outlet></router-outlet>\r\n  </ng-template>\r\n</lpx-layout>\r\n", dependencies: [{ kind: "component", type: i1$3.SideMenuLayoutComponent, selector: "lpx-layout" }, { kind: "directive", type: i1$3.LanguageSelectionPanelDirective, selector: "ng-template[lpx-language-selection]" }, { kind: "directive", type: i1$3.TopbarContentPanelDirective, selector: "ng-template[lpx-topbar-content]" }, { kind: "directive", type: i1$3.UserProfilePanelDirective, selector: "ng-template[lpx-user-profile]" }, { kind: "directive", type: i1$3.MobileUserProfilePanelDirective, selector: "ng-template[lpx-mn-user-profile-panel]" }, { kind: "directive", type: i1$3.MobileLanguageSelectionDirective, selector: "ng-template[lpx-mn-language-selection]" }, { kind: "directive", type: i1.RouterOutlet, selector: "router-outlet", inputs: ["name", "routerOutletData"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "component", type: i3.NavbarComponent, selector: "lpx-navbar" }, { kind: "component", type: i3.NavbarRoutesComponent, selector: "lpx-navbar-routes", inputs: ["groupedItems", "navbarItems", "routerItem"], outputs: ["routeClick"] }, { kind: "directive", type: i3.NavbarRoutesDirective, selector: "[lpx-navbar-routes],[lpxNavbarRoutes]", exportAs: ["lpxNavbarRoutes"] }, { kind: "directive", type: i1$1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "directive", type: i5.IfReplaceableTemplateExistsDirective, selector: "[abpIfReplaceableTemplateExists]", inputs: ["abpIfReplaceableTemplateExists"] }, { kind: "component", type: i5.PageAlertContainerComponent, selector: "abp-page-alert-container" }, { kind: "directive", type: i3.BreadcrumbPanelDirective, selector: "ng-template[lpx-breadcrumb-panel]" }, { kind: "directive", type: i3.ContentPanelDirective, selector: "ng-template[lpx-content]" }, { kind: "directive", type: i3.CurrentUserImagePanelDirective, selector: "ng-template[lpx-current-user-image-panel]" }, { kind: "directive", type: i3.FooterPanelDirective, selector: "ng-template[lpx-footer-panel]" }, { kind: "directive", type: i3.LogoPanelDirective, selector: "ng-template[lpx-logo-panel]" }, { kind: "directive", type: i3.MobileNavbarPanelDirective, selector: "ng-template[lpx-mobile-navbar-panel]" }, { kind: "directive", type: i3.NavbarPanelDirective, selector: "ng-template[lpx-navbar-panel]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuApplicationLayoutComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-application-layout', template: "<lpx-layout #layout>\r\n  <ng-template lpx-navbar-panel>\r\n    <lpx-navbar\r\n      *abpReplaceableTemplate=\"{\r\n        componentKey: navbarKey\r\n      }\"\r\n    >\r\n      <ng-container *abpIfReplaceableTemplateExists=\"logoKey\">\r\n        <ng-template lpx-logo-panel>\r\n          <ng-container *abpReplaceableTemplate=\"{ componentKey: logoKey }\">\r\n          </ng-container>\r\n        </ng-template>\r\n      </ng-container>\r\n\r\n      <ng-template lpx-navbar-routes let-items>\r\n        <lpx-navbar-routes\r\n          *abpReplaceableTemplate=\"{\r\n            componentKey: routesKey,\r\n            inputs: {\r\n              navbarItems: items\r\n            }\r\n          }\"\r\n          [navbarItems]=\"items\"\r\n        >\r\n        </lpx-navbar-routes>\r\n      </ng-template>\r\n    </lpx-navbar>\r\n  </ng-template>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"navItemsKey\">\r\n    <ng-template lpx-topbar-content>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: navItemsKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"logoKey\">\r\n    <ng-template lpx-logo-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: logoKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"currentUserKey\">\r\n    <ng-template lpx-user-profile>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: currentUserKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"currentUserImageKey\">\r\n    <ng-template lpx-current-user-image-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: currentUserImageKey }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"languageKey\">\r\n    <ng-template lpx-language-selection>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: languageKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"breadcrumbKey\">\r\n    <ng-template lpx-breadcrumb-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{\r\n          componentKey: breadcrumbKey\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileNavbarKey\">\r\n    <ng-template lpx-mobile-navbar-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: mobileNavbarKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileUserProfile\">\r\n    <ng-template lpx-mn-user-profile-panel>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: mobileUserProfile }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"footerKey\">\r\n    <ng-template lpx-footer-panel>\r\n      <ng-container *abpReplaceableTemplate=\"{ componentKey: footerKey }\">\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n\r\n  <ng-container *abpIfReplaceableTemplateExists=\"mobileLanguageSelection\">\r\n    <ng-template lpx-mn-language-selection>\r\n      <ng-container\r\n        *abpReplaceableTemplate=\"{ componentKey: mobileLanguageSelection }\"\r\n      >\r\n      </ng-container>\r\n    </ng-template>\r\n  </ng-container>\r\n  <ng-template lpx-content>\r\n    <abp-page-alert-container\r\n      *abpReplaceableTemplate=\"{ componentKey: pageAlertContainerKey }\"\r\n    ></abp-page-alert-container>\r\n\r\n    <router-outlet></router-outlet>\r\n  </ng-template>\r\n</lpx-layout>\r\n" }]
        }] });

const LPX_LAYOUT_PROVIDER = provideAppInitializer(() => {
    initLayouts();
});
function initLayouts() {
    const replaceableComponents = inject(ReplaceableComponentsService);
    replaceableComponents.add({
        key: "Theme.ApplicationLayoutComponent" /* eThemeLeptonXComponents.ApplicationLayout */,
        component: SideMenuApplicationLayoutComponent,
    });
    replaceableComponents.add({
        key: "Theme.EmptyLayoutComponent" /* eThemeLeptonXComponents.EmptyLayout */,
        component: EmptyLayoutComponent,
    });
}

const NAV_ITEM_PROVIDER = provideAppInitializer(() => {
    addNavItems();
});
function addNavItems() {
    const navItems = inject(NavItemsService);
    const oAuthService = inject(OAuthService);
    navItems.addItems([
        {
            id: "Theme.LoginComponent" /* eThemeLeptonXComponents.Login */,
            order: 100,
            visible: () => !oAuthService.hasValidAccessToken(),
            component: NavigateToLoginComponent,
        },
        {
            id: "Theme.LanguagesComponent" /* eThemeLeptonXComponents.Languages */,
            order: 100,
            component: LanguageSelectionComponent,
        },
        {
            id: "Theme.CurrentUserComponent" /* eThemeLeptonXComponents.CurrentUser */,
            order: 100,
            component: UserProfileComponent,
        },
    ]);
}

class SideMenuLayoutModule {
    static forRoot() {
        return {
            ngModule: SideMenuLayoutModule,
            providers: [
                LPX_LAYOUT_PROVIDER,
                NAV_ITEM_PROVIDER,
                LpxSideMenuLayoutModule.forRoot().providers,
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutModule, declarations: [SideMenuApplicationLayoutComponent,
            NavItemsComponent,
            LanguageSelectionComponent,
            UserProfileComponent,
            NavigateToLoginComponent], imports: [CommonModule,
            LpxSideMenuLayoutModule,
            RouterModule,
            LpxNavbarModule,
            CoreModule,
            LeptonXAbpCoreModule,
            PanelsModule,
            UserProfileModule,
            LanguageSelectionModule,
            LpxTranslateModule,
            LpxFooterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutModule, imports: [CommonModule,
            LpxSideMenuLayoutModule,
            RouterModule,
            LpxNavbarModule,
            CoreModule,
            LeptonXAbpCoreModule,
            PanelsModule,
            UserProfileModule,
            LanguageSelectionModule,
            LpxTranslateModule,
            LpxFooterModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: SideMenuLayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        SideMenuApplicationLayoutComponent,
                        NavItemsComponent,
                        LanguageSelectionComponent,
                        UserProfileComponent,
                        NavigateToLoginComponent,
                    ],
                    imports: [
                        CommonModule,
                        LpxSideMenuLayoutModule,
                        RouterModule,
                        LpxNavbarModule,
                        CoreModule,
                        LeptonXAbpCoreModule,
                        PanelsModule,
                        UserProfileModule,
                        LanguageSelectionModule,
                        LpxTranslateModule,
                        LpxFooterModule,
                    ],
                }]
        }] });

/*
 * Public API Surface of theme-lepton-x/layouts
 */

/**
 * Generated bundle index. Do not edit.
 */

export { EmptyLayoutComponent, LPX_LAYOUT_PROVIDER, LanguageSelectionComponent, NAV_ITEM_PROVIDER, NavItemsComponent, NavigateToLoginComponent, SideMenuApplicationLayoutComponent, SideMenuLayoutModule, UserProfileComponent, addNavItems, initLayouts };
//# sourceMappingURL=abp-ng.theme.lepton-x-layouts.mjs.map
