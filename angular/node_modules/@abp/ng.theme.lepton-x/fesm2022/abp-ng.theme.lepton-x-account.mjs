import * as i0 from '@angular/core';
import { inject, signal, Injectable, Component, provideAppInitializer, NgModule } from '@angular/core';
import * as i1$1 from '@angular/router';
import { ActivatedRoute, RouterModule } from '@angular/router';
import * as i2$1 from '@volo/abp.ng.lepton-x.core';
import { PageAlertContainerModule } from '@volo/abp.ng.lepton-x.core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@abp/ng.core';
import { ConfigStateService, MultiTenancyService, AbpTenantService, SessionStateService, CoreModule, ReplaceableComponentsService } from '@abp/ng.core';
import * as i4 from '@abp/ng.theme.shared';
import { ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';
import { finalize } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i2 from '@angular/forms';
import * as i3$1 from '@volo/ngx-lepton-x.lite';
import { LanguageSelectionModule } from '@volo/ngx-lepton-x.lite';
import { LpxSideMenuLayoutModule } from '@volo/ngx-lepton-x.lite/layouts';

class AccountLayoutService {
    constructor() {
        this.configState = inject(ConfigStateService);
        this.multiTenancy = inject(MultiTenancyService);
        this.toasterService = inject(ToasterService);
        this.tenantService = inject(AbpTenantService);
        this.sessionState = inject(SessionStateService);
        this.isMultiTenancyEnabled$ = this.configState.getDeep$('multiTenancy.isEnabled');
        this.enableLocalLogin$ = this.configState.getSetting$('Abp.Account.EnableLocalLogin')
            .pipe(map(value => value?.toLowerCase() !== 'false'));
        this.tenantBoxKey = 'Account.TenantBoxComponent';
        this.route = inject(ActivatedRoute);
        //
        this.currentTenant$ = this.sessionState.getTenant$();
        this.name = signal('');
    }
    get isTenantBoxVisibleForCurrentRoute() {
        return this.getMostInnerChild().data.tenantBoxVisible ?? true;
    }
    get isTenantBoxVisible() {
        return this.isTenantBoxVisibleForCurrentRoute && this.multiTenancy.isTenantBoxVisible;
    }
    getMostInnerChild() {
        let child = this.route.snapshot;
        let depth = 0;
        const depthLimit = 10;
        while (child.firstChild && depth < depthLimit) {
            child = child.firstChild;
            depth++;
        }
        return child;
    }
    onSwitch() {
        const tenant = this.sessionState.getTenant();
        this.name.set(tenant?.name || '');
        this.isModalVisible = true;
    }
    save() {
        const name = this.name();
        if (!name) {
            this.setTenant(null);
            this.isModalVisible = false;
            return;
        }
        this.modalBusy = true;
        this.tenantService
            .findTenantByName(name)
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(({ success, tenantId: id, ...tenant }) => {
            if (!success) {
                this.showError();
                return;
            }
            this.setTenant({ ...tenant, id, isAvailable: true });
            this.isModalVisible = false;
        });
    }
    setTenant(tenant) {
        this.sessionState.setTenant(tenant);
        this.configState.refreshAppState();
    }
    showError() {
        this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {
            messageLocalizationParams: [this.name()],
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutService, decorators: [{
            type: Injectable
        }] });

class TenantBoxComponent {
    constructor() {
        this.service = inject(AccountLayoutService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantBoxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: TenantBoxComponent, isStandalone: true, selector: "lpx-tenant-box", ngImport: i0, template: "@if ((service.currentTenant$ | async) || {}; as currentTenant) {\r\n  <div class=\"card shadow-sm rounded mb-3\">\r\n    <div class=\"card-body px-5\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <span style=\"font-size: 0.8em\" class=\"text-uppercase text-muted\">{{\r\n            'AbpUiMultiTenancy::Tenant' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class=\"m-0 d-inline-block\">\r\n            <i>{{\r\n              currentTenant.name ||\r\n                ('AbpUiMultiTenancy::NotSelected' | abpLocalization)\r\n            }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class=\"col-auto\">\r\n          <a\r\n            id=\"AbpTenantSwitchLink\"\r\n            href=\"javascript:void(0);\"\r\n            class=\"btn btn-sm mt-3 btn-outline-primary\"\r\n            (click)=\"service.onSwitch()\"\r\n            >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal\r\n    size=\"md\"\r\n    [(visible)]=\"service.isModalVisible\"\r\n    [busy]=\"service.modalBusy\"\r\n  >\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)=\"service.save()\">\r\n        <div class=\"mt-2\">\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">{{\r\n              'AbpUiMultiTenancy::Name' | abpLocalization\r\n            }}</label>\r\n            <input\r\n              [(ngModel)]=\"service.name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"tenant\"\r\n              class=\"form-control\"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-outline-primary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type=\"abp-button\"\r\n        iconClass=\"fa fa-check\"\r\n        (click)=\"service.save()\"\r\n        [disabled]=\"currentTenant?.name === service.name\"\r\n      >\r\n        <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n}\r\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: CoreModule }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }, { kind: "directive", type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { kind: "ngmodule", type: ThemeSharedModule }, { kind: "component", type: i4.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i4.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i4.ModalCloseDirective, selector: "[abpClose]" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-tenant-box', imports: [CommonModule, CoreModule, ThemeSharedModule], template: "@if ((service.currentTenant$ | async) || {}; as currentTenant) {\r\n  <div class=\"card shadow-sm rounded mb-3\">\r\n    <div class=\"card-body px-5\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <span style=\"font-size: 0.8em\" class=\"text-uppercase text-muted\">{{\r\n            'AbpUiMultiTenancy::Tenant' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class=\"m-0 d-inline-block\">\r\n            <i>{{\r\n              currentTenant.name ||\r\n                ('AbpUiMultiTenancy::NotSelected' | abpLocalization)\r\n            }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class=\"col-auto\">\r\n          <a\r\n            id=\"AbpTenantSwitchLink\"\r\n            href=\"javascript:void(0);\"\r\n            class=\"btn btn-sm mt-3 btn-outline-primary\"\r\n            (click)=\"service.onSwitch()\"\r\n            >{{ 'AbpUiMultiTenancy::Switch' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal\r\n    size=\"md\"\r\n    [(visible)]=\"service.isModalVisible\"\r\n    [busy]=\"service.modalBusy\"\r\n  >\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)=\"service.save()\">\r\n        <div class=\"mt-2\">\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">{{\r\n              'AbpUiMultiTenancy::Name' | abpLocalization\r\n            }}</label>\r\n            <input\r\n              [(ngModel)]=\"service.name\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"tenant\"\r\n              class=\"form-control\"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ 'AbpUiMultiTenancy::SwitchTenantHint' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-outline-primary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type=\"abp-button\"\r\n        iconClass=\"fa fa-check\"\r\n        (click)=\"service.save()\"\r\n        [disabled]=\"currentTenant?.name === service.name\"\r\n      >\r\n        <span>{{ 'AbpTenantManagement::Save' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n}\r\n" }]
        }] });

class AuthWrapperComponent {
    constructor() {
        this.service = inject(AccountLayoutService);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AuthWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "19.1.8", type: AuthWrapperComponent, isStandalone: true, selector: "lpx-auth-wrapper", providers: [AccountLayoutService], ngImport: i0, template: "<div class=\"row\">\r\n  <div class=\"mx-auto col col-md-5\">\r\n    @if (\r\n      (service.isMultiTenancyEnabled$ | async) && service.isTenantBoxVisible\r\n    ) {\r\n      <lpx-tenant-box\r\n        *abpReplaceableTemplate=\"{ componentKey: service.tenantBoxKey }\"\r\n      ></lpx-tenant-box>\r\n    }\r\n\r\n    <div class=\"abp-account-container\">\r\n      @if (service.enableLocalLogin$ | async) {\r\n        <div class=\"card mt-3 shadow-sm rounded\">\r\n          <div class=\"card-body p-5\">\r\n            <lpx-language-selection class=\"float-end\"></lpx-language-selection>\r\n            <ng-content></ng-content>\r\n          </div>\r\n        </div>\r\n      } @else {\r\n        <div class=\"alert alert-warning\">\r\n          <strong>{{\r\n            'AbpAccount::InvalidLoginRequest' | abpLocalization\r\n          }}</strong>\r\n          {{\r\n            'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient'\r\n              | abpLocalization\r\n          }}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</div>\r\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: CoreModule }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }, { kind: "directive", type: i3.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "ngmodule", type: ThemeSharedModule }, { kind: "component", type: TenantBoxComponent, selector: "lpx-tenant-box" }, { kind: "ngmodule", type: LanguageSelectionModule }, { kind: "component", type: i3$1.LanguageSelectionComponent, selector: "lpx-language-selection" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AuthWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-auth-wrapper', imports: [
                        CommonModule,
                        CoreModule,
                        ThemeSharedModule,
                        TenantBoxComponent,
                        LanguageSelectionModule,
                    ], providers: [AccountLayoutService], template: "<div class=\"row\">\r\n  <div class=\"mx-auto col col-md-5\">\r\n    @if (\r\n      (service.isMultiTenancyEnabled$ | async) && service.isTenantBoxVisible\r\n    ) {\r\n      <lpx-tenant-box\r\n        *abpReplaceableTemplate=\"{ componentKey: service.tenantBoxKey }\"\r\n      ></lpx-tenant-box>\r\n    }\r\n\r\n    <div class=\"abp-account-container\">\r\n      @if (service.enableLocalLogin$ | async) {\r\n        <div class=\"card mt-3 shadow-sm rounded\">\r\n          <div class=\"card-body p-5\">\r\n            <lpx-language-selection class=\"float-end\"></lpx-language-selection>\r\n            <ng-content></ng-content>\r\n          </div>\r\n        </div>\r\n      } @else {\r\n        <div class=\"alert alert-warning\">\r\n          <strong>{{\r\n            'AbpAccount::InvalidLoginRequest' | abpLocalization\r\n          }}</strong>\r\n          {{\r\n            'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient'\r\n              | abpLocalization\r\n          }}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</div>\r\n" }]
        }] });

class AccountLayoutComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: AccountLayoutComponent, isStandalone: false, selector: "abp-account-layout", ngImport: i0, template: "<div class=\"container d-flex flex-column vh-100 justify-content-center\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n  <lpx-auth-wrapper>\r\n    <router-outlet></router-outlet>\r\n  </lpx-auth-wrapper>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i1$1.RouterOutlet, selector: "router-outlet", inputs: ["name", "routerOutletData"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "component", type: i2$1.PageAlertContainerComponent, selector: "abp-page-alert-container" }, { kind: "component", type: AuthWrapperComponent, selector: "lpx-auth-wrapper" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-account-layout', template: "<div class=\"container d-flex flex-column vh-100 justify-content-center\">\r\n  <abp-page-alert-container></abp-page-alert-container>\r\n  <lpx-auth-wrapper>\r\n    <router-outlet></router-outlet>\r\n  </lpx-auth-wrapper>\r\n</div>\r\n" }]
        }] });

class AccountLayoutModule {
    static forRoot() {
        return {
            ngModule: AccountLayoutModule,
            providers: [
                provideAppInitializer(() => {
                    initAccountLayout();
                }),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutModule, declarations: [AccountLayoutComponent], imports: [RouterModule,
            CoreModule,
            LpxSideMenuLayoutModule,
            ThemeSharedModule,
            PageAlertContainerModule,
            LanguageSelectionModule,
            TenantBoxComponent,
            AuthWrapperComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutModule, imports: [RouterModule,
            CoreModule,
            LpxSideMenuLayoutModule,
            ThemeSharedModule,
            PageAlertContainerModule,
            LanguageSelectionModule,
            TenantBoxComponent,
            AuthWrapperComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: AccountLayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AccountLayoutComponent],
                    imports: [
                        RouterModule,
                        CoreModule,
                        LpxSideMenuLayoutModule,
                        ThemeSharedModule,
                        PageAlertContainerModule,
                        LanguageSelectionModule,
                        TenantBoxComponent,
                        AuthWrapperComponent,
                    ],
                }]
        }] });
function initAccountLayout() {
    const replaceableComponents = inject(ReplaceableComponentsService);
    replaceableComponents.add({
        key: 'Theme.AccountLayoutComponent',
        component: AccountLayoutComponent,
    });
}

/**
 * Generated bundle index. Do not edit.
 */

export { AccountLayoutComponent, AccountLayoutModule, initAccountLayout };
//# sourceMappingURL=abp-ng.theme.lepton-x-account.mjs.map
