import { ConfigStateService } from '@abp/ng.core';
import { ToasterService } from '@abp/ng.theme.shared';
import { GetPermissionListResultDto, PermissionGrantInfoDto, PermissionGroupDto, PermissionsService, ProviderInfoDto } from '@abp/ng.permission-management/proxy';
import { ElementRef, EventEmitter, QueryList, TrackByFunction } from '@angular/core';
import { PermissionManagement } from '../models/permission-management';
import * as i0 from "@angular/core";
type PermissionWithStyle = PermissionGrantInfoDto & {
    style: string;
};
type PermissionWithGroupName = PermissionGrantInfoDto & {
    groupName: string;
};
export declare class PermissionManagementComponent implements PermissionManagement.PermissionManagementComponentInputs, PermissionManagement.PermissionManagementComponentOutputs {
    protected readonly service: PermissionsService;
    protected readonly configState: ConfigStateService;
    protected readonly toasterService: ToasterService;
    readonly providerName: string;
    readonly providerKey: string;
    readonly hideBadges = false;
    protected _visible: boolean;
    entityDisplayName: string | undefined;
    get visible(): boolean;
    set visible(value: boolean);
    readonly visibleChange: EventEmitter<boolean>;
    selectAllInThisTabsRef: QueryList<ElementRef<HTMLInputElement>>;
    selectAllInAllTabsRef: QueryList<ElementRef<HTMLInputElement>>;
    data: GetPermissionListResultDto;
    selectedGroup?: PermissionGroupDto | null;
    permissions: PermissionWithGroupName[];
    selectThisTab: boolean;
    selectAllTab: boolean;
    disableSelectAllTab: boolean;
    disabledSelectAllInAllTabs: boolean;
    modalBusy: boolean;
    filter: import("@angular/core").WritableSignal<string>;
    selectedGroupPermissions: PermissionWithStyle[];
    permissionGroupSignal: import("@angular/core").WritableSignal<PermissionGroupDto[]>;
    permissionGroups: import("@angular/core").Signal<PermissionGroupDto[]>;
    trackByFn: TrackByFunction<PermissionGroupDto>;
    getChecked(name: string): boolean;
    setSelectedGroup(group: PermissionGroupDto): void;
    setDisabled(permissions: PermissionGrantInfoDto[]): void;
    isGrantedByOtherProviderName(grantedProviders: ProviderInfoDto[]): boolean;
    onClickCheckbox(clickedPermission: PermissionGrantInfoDto): void;
    updatePermissionStatus(clickedPermission: PermissionGrantInfoDto): void;
    setParentClicked(clickedPermission: PermissionGrantInfoDto): void;
    updateSelectedGroupPermissions(clickedPermissions: PermissionGrantInfoDto): void;
    setTabCheckboxState(): void;
    setGrantCheckboxState(): void;
    onClickSelectThisTab(): void;
    onClickSelectAll(): void;
    onChangeGroup(group: PermissionGroupDto): void;
    submit(): void;
    openModal(): import("rxjs").Observable<GetPermissionListResultDto>;
    initModal(): void;
    getAssignedCount(groupName: string): number;
    shouldFetchAppConfig(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<PermissionManagementComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PermissionManagementComponent, "abp-permission-management", ["abpPermissionManagement"], { "providerName": { "alias": "providerName"; "required": false; }; "providerKey": { "alias": "providerKey"; "required": false; }; "hideBadges": { "alias": "hideBadges"; "required": false; }; "entityDisplayName": { "alias": "entityDisplayName"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; }, { "visibleChange": "visibleChange"; }, never, never, false, never>;
}
export {};
