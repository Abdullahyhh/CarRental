import * as i3 from '@abp/ng.core';
import { ListService, ReplaceableRouteContainerComponent, authGuard, permissionGuard, RouterOutletComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { TenantService } from '@abp/ng.tenant-management/proxy';
import * as i4 from '@abp/ng.theme.shared';
import { ConfirmationService, ToasterService, Confirmation, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i5 from '@abp/ng.components/extensible';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, ExtensibleModule } from '@abp/ng.components/extensible';
import * as i0 from '@angular/core';
import { inject, Injector, Component, InjectionToken, Injectable, NgModule } from '@angular/core';
import * as i2 from '@angular/forms';
import { UntypedFormBuilder, Validators } from '@angular/forms';
import { finalize, map, tap } from 'rxjs/operators';
import * as i1 from '@ngx-validate/core';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import * as i6 from '@abp/ng.components/page';
import { PageModule } from '@abp/ng.components/page';
import * as i7 from '@abp/ng.feature-management';
import { FeatureManagementComponent } from '@abp/ng.feature-management';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';
import { map as map$1, tap as tap$1 } from 'rxjs';

class TenantsComponent {
    constructor() {
        this.list = inject((ListService));
        this.confirmationService = inject(ConfirmationService);
        this.service = inject(TenantService);
        this.toasterService = inject(ToasterService);
        this.fb = inject(UntypedFormBuilder);
        this.injector = inject(Injector);
        this.data = { items: [], totalCount: 0 };
        this.visibleFeatures = false;
        this.modalBusy = false;
        this.featureManagementKey = "FeatureManagement.FeatureManagementComponent" /* eFeatureManagementComponents.FeatureManagement */;
        this.onVisibleFeaturesChange = (value) => {
            this.visibleFeatures = value;
        };
    }
    get hasSelectedTenant() {
        return Boolean(this.selected.id);
    }
    ngOnInit() {
        this.hookToQuery();
    }
    createTenantForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.tenantForm = generateFormFromProps(data);
    }
    addTenant() {
        this.selected = {};
        this.createTenantForm();
        this.isModalVisible = true;
    }
    editTenant(id) {
        this.service.get(id).subscribe(res => {
            this.selected = res;
            this.createTenantForm();
            this.isModalVisible = true;
        });
    }
    save() {
        if (!this.tenantForm.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        const { id } = this.selected;
        (id
            ? this.service.update(id, { ...this.selected, ...this.tenantForm.value })
            : this.service.create(this.tenantForm.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.toasterService.success('AbpUi::SavedSuccessfully');
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpTenantManagement::TenantDeletionConfirmationMessage', 'AbpTenantManagement::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.toasterService.success('AbpUi::DeletedSuccessfully');
                this.service.delete(id).subscribe(() => this.list.get());
            }
        });
    }
    hookToQuery() {
        this.list
            .hookToQuery(query => this.service.getList(query))
            .subscribe(res => {
            this.data = res;
        });
    }
    onSharedDatabaseChange(value) {
        if (!value) {
            setTimeout(() => {
                const defaultConnectionString = document.getElementById('defaultConnectionString');
                if (defaultConnectionString) {
                    defaultConnectionString.focus();
                }
            }, 0);
        }
    }
    openFeaturesModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visibleFeatures = true;
        }, 0);
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.1.8", type: TenantsComponent, isStandalone: false, selector: "abp-tenants", providers: [
            ListService,
            {
                provide: EXTENSIONS_IDENTIFIER,
                useValue: "TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */,
            },
        ], ngImport: i0, template: "<abp-page [title]=\"'AbpTenantManagement::Tenants' | abpLocalization\" [toolbar]=\"data.items\">\r\n  <div id=\"wrapper\" class=\"card\">\r\n    <div class=\"card-body\">\r\n      <div id=\"data-tables-table-filter\" class=\"data-tables-filter mb-3\">\r\n        <div class=\"input-group\">\r\n          <input\r\n            type=\"search\"\r\n            class=\"form-control\"\r\n            [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n            [(ngModel)]=\"list.filter\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <abp-extensible-table\r\n        [data]=\"data.items || []\"\r\n        [recordsTotal]=\"data.totalCount || 0\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n    <ng-template #abpHeader>\r\n      <h3>\r\n        {{\r\n          (selected?.id ? 'AbpTenantManagement::Edit' : 'AbpTenantManagement::NewTenant')\r\n            | abpLocalization\r\n        }}\r\n      </h3>\r\n    </ng-template>\r\n\r\n    <ng-template #abpBody>\r\n      <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" [validateOnSubmit]=\"true\">\r\n        <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n      </form>\r\n    </ng-template>\r\n\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-outline-primary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"tenantForm?.invalid\">{{\r\n        'AbpTenantManagement::Save' | abpLocalization\r\n      }}</abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n\r\n  <abp-feature-management\r\n    *abpReplaceableTemplate=\"{\r\n      inputs: {\r\n        providerName: { value: 'T' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visibleFeatures, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: $any(onVisibleFeaturesChange) },\r\n      componentKey: featureManagementKey\r\n    }\"\r\n    [(visible)]=\"visibleFeatures\"\r\n    providerName=\"T\"\r\n    [providerKey]=\"providerKey\"\r\n  >\r\n  </abp-feature-management>\r\n</abp-page>\r\n", dependencies: [{ kind: "directive", type: i1.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "directive", type: i3.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "component", type: i4.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i4.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i4.ModalCloseDirective, selector: "[abpClose]" }, { kind: "component", type: i5.ExtensibleFormComponent, selector: "abp-extensible-form", inputs: ["selectedRecord"], exportAs: ["abpExtensibleForm"] }, { kind: "component", type: i5.ExtensibleTableComponent, selector: "abp-extensible-table", inputs: ["actionsText", "data", "list", "recordsTotal", "actionsColumnWidth", "actionsTemplate"], outputs: ["tableActivate"], exportAs: ["abpExtensibleTable"] }, { kind: "component", type: i6.PageComponent, selector: "abp-page", inputs: ["title", "toolbar", "breadcrumb"] }, { kind: "component", type: i7.FeatureManagementComponent, selector: "abp-feature-management", inputs: ["providerKey", "providerName", "providerTitle", "visible"], outputs: ["visibleChange"], exportAs: ["abpFeatureManagement"] }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantsComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'abp-tenants', providers: [
                        ListService,
                        {
                            provide: EXTENSIONS_IDENTIFIER,
                            useValue: "TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */,
                        },
                    ], template: "<abp-page [title]=\"'AbpTenantManagement::Tenants' | abpLocalization\" [toolbar]=\"data.items\">\r\n  <div id=\"wrapper\" class=\"card\">\r\n    <div class=\"card-body\">\r\n      <div id=\"data-tables-table-filter\" class=\"data-tables-filter mb-3\">\r\n        <div class=\"input-group\">\r\n          <input\r\n            type=\"search\"\r\n            class=\"form-control\"\r\n            [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n            [(ngModel)]=\"list.filter\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <abp-extensible-table\r\n        [data]=\"data.items || []\"\r\n        [recordsTotal]=\"data.totalCount || 0\"\r\n        [list]=\"list\"\r\n      ></abp-extensible-table>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n    <ng-template #abpHeader>\r\n      <h3>\r\n        {{\r\n          (selected?.id ? 'AbpTenantManagement::Edit' : 'AbpTenantManagement::NewTenant')\r\n            | abpLocalization\r\n        }}\r\n      </h3>\r\n    </ng-template>\r\n\r\n    <ng-template #abpBody>\r\n      <form [formGroup]=\"tenantForm\" (ngSubmit)=\"save()\" [validateOnSubmit]=\"true\">\r\n        <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n      </form>\r\n    </ng-template>\r\n\r\n    <ng-template #abpFooter>\r\n      <button abpClose type=\"button\" class=\"btn btn-outline-primary\">\r\n        {{ 'AbpTenantManagement::Cancel' | abpLocalization }}\r\n      </button>\r\n      <abp-button iconClass=\"fa fa-check\" (click)=\"save()\" [disabled]=\"tenantForm?.invalid\">{{\r\n        'AbpTenantManagement::Save' | abpLocalization\r\n      }}</abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n\r\n  <abp-feature-management\r\n    *abpReplaceableTemplate=\"{\r\n      inputs: {\r\n        providerName: { value: 'T' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visibleFeatures, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: $any(onVisibleFeaturesChange) },\r\n      componentKey: featureManagementKey\r\n    }\"\r\n    [(visible)]=\"visibleFeatures\"\r\n    providerName=\"T\"\r\n    [providerKey]=\"providerKey\"\r\n  >\r\n  </abp-feature-management>\r\n</abp-page>\r\n" }]
        }] });

const DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpTenantManagement::Edit',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.editTenant(data.record.id);
        },
        permission: 'AbpTenantManagement.Tenants.Update',
    },
    {
        text: 'AbpTenantManagement::Permission:ManageFeatures',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.openFeaturesModal(data.record.id);
        },
        permission: 'AbpTenantManagement.Tenants.ManageFeatures',
    },
    {
        text: 'AbpTenantManagement::Delete',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.delete(data.record.id, data.record.name);
        },
        permission: 'AbpTenantManagement.Tenants.Delete',
    },
]);

const DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        sortable: true,
    },
]);

const DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'name',
        id: 'name',
        displayName: 'AbpTenantManagement::TenantName',
        validators: () => [Validators.required, Validators.maxLength(256)],
    },
    {
        type: "email" /* ePropType.Email */,
        name: 'adminEmailAddress',
        displayName: 'AbpTenantManagement::DisplayName:AdminEmailAddress',
        id: 'admin-email-address',
        validators: () => [Validators.required, Validators.maxLength(256), Validators.email],
    },
    {
        type: "passwordinputgroup" /* ePropType.PasswordInputGroup */,
        name: 'adminPassword',
        displayName: 'AbpTenantManagement::DisplayName:AdminPassword',
        id: 'admin-password',
        autocomplete: 'new-password',
        validators: data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })],
    },
]);
const DEFAULT_TENANTS_EDIT_FORM_PROPS = DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 1);

const DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpTenantManagement::NewTenant',
        action: data => {
            const component = data.getInjected(TenantsComponent);
            component.addTenant();
        },
        permission: 'AbpTenantManagement.Tenants.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: DEFAULT_TENANTS_ENTITY_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS = {
    ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: DEFAULT_TENANTS_TOOLBAR_ACTIONS,
};
const DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS = {
    ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: DEFAULT_TENANTS_ENTITY_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: DEFAULT_TENANTS_CREATE_FORM_PROPS,
};
const DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS = {
    ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: DEFAULT_TENANTS_EDIT_FORM_PROPS,
};
const TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');
const TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');
const TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');

/**
 * @deprecated Use `tenantManagementExtensionsResolver` *function* instead.
 */
class TenantManagementExtensionsGuard {
    constructor() {
        this.injector = inject(Injector);
        this.extensions = inject(ExtensionsService);
    }
    canActivate() {
        const config = { optional: true };
        const actionContributors = inject(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, config) || {};
        const toolbarContributors = inject(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, config) || {};
        const propContributors = inject(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, config) || {};
        const createFormContributors = inject(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, config) || {};
        const editFormContributors = inject(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, config) || {};
        return getObjectExtensionEntitiesFromStore(this.injector, 'TenantManagement').pipe(map(entities => ({
            ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: entities.Tenant,
        })), mapEntitiesToContributors(this.injector, 'TenantManagement'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(this.extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(this.extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(this.extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(this.extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(this.extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), map(() => true));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementExtensionsGuard, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementExtensionsGuard }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementExtensionsGuard, decorators: [{
            type: Injectable
        }] });

const tenantManagementExtensionsResolver = () => {
    const injector = inject(Injector);
    const extensions = inject(ExtensionsService);
    const config = { optional: true };
    const actionContributors = inject(TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, config) || {};
    const toolbarContributors = inject(TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, config) || {};
    const propContributors = inject(TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, config) || {};
    const createFormContributors = inject(TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, config) || {};
    const editFormContributors = inject(TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, config) || {};
    return getObjectExtensionEntitiesFromStore(injector, 'TenantManagement').pipe(map$1(entities => ({
        ["TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */]: entities.Tenant,
    })), mapEntitiesToContributors(injector, 'TenantManagement'), tap$1(objectExtensionContributors => {
        mergeWithDefaultActions(extensions.entityActions, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, actionContributors);
        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);
        mergeWithDefaultProps(extensions.entityProps, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
    }));
};

const routes = [
    { path: '', redirectTo: 'tenants', pathMatch: 'full' },
    {
        path: '',
        component: RouterOutletComponent,
        canActivate: [authGuard, permissionGuard],
        resolve: [tenantManagementExtensionsResolver],
        children: [
            {
                path: 'tenants',
                component: ReplaceableRouteContainerComponent,
                data: {
                    requiredPolicy: 'AbpTenantManagement.Tenants',
                    replaceableComponent: {
                        key: "TenantManagement.TenantsComponent" /* eTenantManagementComponents.Tenants */,
                        defaultComponent: TenantsComponent,
                    },
                },
                title: 'AbpTenantManagement::Tenants',
            },
        ],
    },
];
class TenantManagementRoutingModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule],
                }]
        }] });

class TenantManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: TenantManagementModule,
            providers: [
                {
                    provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                TenantManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(TenantManagementModule.forChild(options));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementModule, declarations: [TenantsComponent], imports: [TenantManagementRoutingModule,
            NgxValidateCoreModule,
            CoreModule,
            ThemeSharedModule,
            NgbDropdownModule,
            ExtensibleModule,
            PageModule,
            FeatureManagementComponent], exports: [TenantsComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementModule, imports: [TenantManagementRoutingModule,
            NgxValidateCoreModule,
            CoreModule,
            ThemeSharedModule,
            NgbDropdownModule,
            ExtensibleModule,
            PageModule,
            FeatureManagementComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.1.8", ngImport: i0, type: TenantManagementModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TenantsComponent],
                    exports: [TenantsComponent],
                    imports: [
                        TenantManagementRoutingModule,
                        NgxValidateCoreModule,
                        CoreModule,
                        ThemeSharedModule,
                        NgbDropdownModule,
                        ExtensibleModule,
                        PageModule,
                        FeatureManagementComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DEFAULT_TENANT_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_TENANT_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TENANT_MANAGEMENT_ENTITY_PROPS, DEFAULT_TENANT_MANAGEMENT_TOOLBAR_ACTIONS, TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TenantManagementExtensionsGuard, TenantManagementModule, TenantsComponent, tenantManagementExtensionsResolver };
//# sourceMappingURL=abp-ng.tenant-management.mjs.map
